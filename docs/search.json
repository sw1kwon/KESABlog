[
  {
    "objectID": "posts/c_03.html",
    "href": "posts/c_03.html",
    "title": "3. 승강기 검사 결과",
    "section": "",
    "text": "한국승강기안전공단_승강기 검사 결과\n\n한국승강기안전공단에서는 승강기 관련 종합정보전산망을 구축하여 승강기에 대한 종합정보와 사고 등의 각종 이력관리 및 승강기관련 각종 통계자료를 제공하고 있습니다.\n\nhttps://www.data.go.kr/data/15112639/fileData.do"
  },
  {
    "objectID": "posts/c_03.html#load-data",
    "href": "posts/c_03.html#load-data",
    "title": "3. 승강기 검사 결과",
    "section": "Load Data",
    "text": "Load Data\n\nurl = \"https://raw.githubusercontent.com/sw1kwon/KESA/refs/heads/main/data/c_03.csv\"\ndf = pd.read_csv(url)\n\n\ndf.head()\n\n\n\n\n\n\n\n\n검사결과이력조회코드\n검사일자\n검사종류\n검사차수\n검사결과\n검사기관\n검사당시승강기구분\n검사당시승강기형식\n승강기세부형식\n검사당시승강기종류\n설치수시구분\n\n\n\n\n0\n4300001\n2024-08-23\n정기\n1\n합격\n한국승강기안전공단 서울서부지사\n엘리베이터\n권상식\nVVVF\n승객용\nNaN\n\n\n1\n8500001\n2024-09-05\n정기\n1\n조건부합격(1개월/서류검사)\n(재)승강기안전기술연구원 서울지원\n엘리베이터\n권상식\nVVVF\n화물용\nNaN\n\n\n2\n8500001\n2024-09-24\n정기\n2\n조건후합격\n(재)승강기안전기술연구원 서울지원\n엘리베이터\n권상식\nVVVF\n화물용\nNaN\n\n\n3\n10000015\n2024-12-13\n정기\n1\n합격\n한국승강기안전공단 서울동부지사\n엘리베이터\n권상식\nVVVF\n승객용\nNaN\n\n\n4\n10000029\n2024-08-06\n정밀\n1\n합격\n한국승강기안전공단 서울동부지사\n엘리베이터\n권상식\nVVVF\n승객용\nNaN"
  },
  {
    "objectID": "posts/c_03.html#데이터-구조-확인",
    "href": "posts/c_03.html#데이터-구조-확인",
    "title": "3. 승강기 검사 결과",
    "section": "데이터 구조 확인",
    "text": "데이터 구조 확인\n\ndf.shape\n\n(634630, 11)\n\n\n\n# 데이터 구조 파악\n# object 문자형\n# int/float 수치형\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 634630 entries, 0 to 634629\nData columns (total 11 columns):\n #   Column      Non-Null Count   Dtype \n---  ------      --------------   ----- \n 0   검사결과이력조회코드  634630 non-null  int64 \n 1   검사일자        634630 non-null  object\n 2   검사종류        634630 non-null  object\n 3   검사차수        634630 non-null  int64 \n 4   검사결과        634630 non-null  object\n 5   검사기관        634630 non-null  object\n 6   검사당시승강기구분   634630 non-null  object\n 7   검사당시승강기형식   634630 non-null  object\n 8   승강기세부형식     608851 non-null  object\n 9   검사당시승강기종류   634630 non-null  object\n 10  설치수시구분      51038 non-null   object\ndtypes: int64(2), object(9)\nmemory usage: 53.3+ MB\n\n\n\n‘승강기세부형식’, ’설치수시구분’을 제외한 모든 변수에 Null 값이 없음\n’설치수시구분’은 Null 값이 많아보임\n\n\n# 문자형(범주형) 데이터 확인\ndf.describe(include=['object']).T\n\n\n\n\n\n\n\n\ncount\nunique\ntop\nfreq\n\n\n\n\n검사일자\n634630\n170\n2024-09-11\n6229\n\n\n검사종류\n634630\n4\n정기\n512547\n\n\n검사결과\n634630\n17\n합격\n241185\n\n\n검사기관\n634630\n58\n한국승강기안전공단 경기북부지사\n25361\n\n\n검사당시승강기구분\n634630\n7\n엘리베이터\n603263\n\n\n검사당시승강기형식\n634630\n15\n권상식\n592885\n\n\n승강기세부형식\n608851\n7\nVVVF\n591519\n\n\n검사당시승강기종류\n634630\n35\n승객용\n219813\n\n\n설치수시구분\n51038\n6\n신규설치\n21103\n\n\n\n\n\n\n\n\n나중에 검사일자를 시계열 데이터 형식으로 바꿔서 분석 (필요 시)\n’검사당시승강기형식’과 ’승강기세부형식’에 모르는 용어가 많을 것 같음\n\n\n# 수치형 데이터 확인\ndf.describe(include=['int64','float64'])\n\n\n\n\n\n\n\n\n검사결과이력조회코드\n검사차수\n\n\n\n\ncount\n6.346300e+05\n634630.000000\n\n\nmean\n4.213546e+07\n1.282875\n\n\nstd\n1.873299e+07\n0.450397\n\n\nmin\n4.300001e+06\n1.000000\n\n\n25%\n3.050155e+07\n1.000000\n\n\n50%\n4.400182e+07\n1.000000\n\n\n75%\n5.600694e+07\n2.000000\n\n\nmax\n7.990011e+07\n2.000000\n\n\n\n\n\n\n\n\n# df.describe(include='number') # 동일 결과 코드\n\n\n검사차수는 1차 또는 2차"
  },
  {
    "objectID": "posts/c_03.html#결측치-각-column의-결측값-비율",
    "href": "posts/c_03.html#결측치-각-column의-결측값-비율",
    "title": "3. 승강기 검사 결과",
    "section": "1. (결측치) 각 column의 결측값 비율",
    "text": "1. (결측치) 각 column의 결측값 비율\n\n# 각 column의 결측값 비율 계산\nmissing_ratio = df.isnull().mean()                  # 각 column의 결측값 비율 계산 (결측 개수 / 전체 row 수)\nmissing_ratio = missing_ratio.sort_values(ascending=False)  # 결측 비율이 높은 순서대로 정렬\nmissing_ratio = missing_ratio.reset_index()         # Series → DataFrame 변환 (인덱스 초기화)\nmissing_ratio.columns = ['Column', 'MissingRatio']\nprint(missing_ratio)\n\n        Column  MissingRatio\n0       설치수시구분      0.919578\n1      승강기세부형식      0.040621\n2   검사결과이력조회코드      0.000000\n3         검사종류      0.000000\n4         검사일자      0.000000\n5         검사차수      0.000000\n6         검사결과      0.000000\n7    검사당시승강기구분      0.000000\n8         검사기관      0.000000\n9    검사당시승강기형식      0.000000\n10   검사당시승강기종류      0.000000\n\n\n\n나중에 두 변수의 결측치를 어떻게 해아할지 고민해봐야할 듯"
  },
  {
    "objectID": "posts/c_03.html#이상치-각-column별-이상치-확인",
    "href": "posts/c_03.html#이상치-각-column별-이상치-확인",
    "title": "3. 승강기 검사 결과",
    "section": "2. (이상치) 각 column별 이상치 확인",
    "text": "2. (이상치) 각 column별 이상치 확인\n\n# 수치형 변수만 추출\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 이상치 비율 저장용 리스트\noutlier_info = []\n\n# 각 수치형 column에 대해 이상치 비율 계산 (IQR 방식)\nfor col in numeric_cols:\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n    lower = Q1 - 1.5 * IQR\n    upper = Q3 + 1.5 * IQR\n    outliers = ((df[col] &lt; lower) | (df[col] &gt; upper)).sum()\n    outlier_ratio = outliers / df.shape[0]\n    outlier_info.append((col, outliers, outlier_ratio))\n\n# 결과 DataFrame 정리\noutlier_df = pd.DataFrame(outlier_info, columns=['Column', 'OutlierCount', 'OutlierRatio'])\noutlier_df = outlier_df.sort_values(by='OutlierRatio', ascending=False)\n\nprint(outlier_df)\n\n       Column  OutlierCount  OutlierRatio\n0  검사결과이력조회코드             0           0.0\n1        검사차수             0           0.0\n\n\n\n별 의미는 없음\n\n\n# # 이상치 비율이 높은 상위 n개 변수만 시각화\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\n# # 이상치 비율 높은 상위 n개 변수만 선택\n# top_n = 5\n# top_outlier_cols = outlier_df.head(top_n)['Column']\n\n# # 박스플롯 시각화\n# plt.figure(figsize=(12, 6))\n# for i, col in enumerate(top_outlier_cols, 1):\n#     plt.subplot(1, top_n, i)\n#     sns.boxplot(y=df[col])\n#     plt.title(col)\n#     plt.tight_layout()\n\n# plt.show()\n\n\n이상치가 없어서 실행 X\n\n\n# # 개별 탐색 시 사용 가능한 함수 정의\n# def plot_box(col):\n#     sns.boxplot(y=df[col])\n#     plt.title(f\"Boxplot of {col}\")\n#     plt.show()\n\n# # 예시 사용: plot_box('Column Name')"
  },
  {
    "objectID": "posts/c_03.html#unique-각-column의-unique값과-unique값별-빈도",
    "href": "posts/c_03.html#unique-각-column의-unique값과-unique값별-빈도",
    "title": "3. 승강기 검사 결과",
    "section": "3. (unique) 각 column의 unique값과 unique값별 빈도",
    "text": "3. (unique) 각 column의 unique값과 unique값별 빈도\n\n# # 전체 column 대상 (비율을 %로, 순서 유지)\n\n# for col in df.columns:\n#     print(f\"=== {col} ===\")\n#     print(\"Unique count:\", df[col].nunique())\n\n#     # 빈도와 비율 계산 (NaN 포함, 고유값 순서 유지)\n#     value_counts = df[col].value_counts(dropna=False, sort=False)\n#     value_ratio = df[col].value_counts(normalize=True, dropna=False, sort=False) * 100  # 비율을 %\n\n#     # 결합\n#     summary_df = pd.DataFrame({\n#         'Count': value_counts,\n#         'Ratio (%)': value_ratio.round(2)\n#     })\n\n#     print(summary_df)\n#     print(\"\\n\")\n\n\n# 범주형 변수만 대상\ncat_cols = df.select_dtypes(include=['object']).columns\n\nfor col in cat_cols:\n    print(f\"=== {col} ===\")\n    print(\"Unique count:\", df[col].nunique())\n\n    value_counts = df[col].value_counts(dropna=False, sort=False)\n    value_ratio = df[col].value_counts(normalize=True, dropna=False, sort=False) * 100\n\n    summary_df = pd.DataFrame({\n        'Count': value_counts,\n        'Ratio (%)': value_ratio.round(2)\n    })\n\n    print(summary_df)\n    print(\"\\n\")\n\n=== 검사일자 ===\nUnique count: 170\n            Count  Ratio (%)\n검사일자                        \n2024-08-23   4973       0.78\n2024-09-05   5841       0.92\n2024-09-24   5840       0.92\n2024-12-13   4781       0.75\n2024-08-06   5181       0.82\n...           ...        ...\n2024-12-07     22       0.00\n2024-09-16      1       0.00\n2024-12-25      1       0.00\n2024-07-27     46       0.01\n2024-12-15      1       0.00\n\n[170 rows x 2 columns]\n\n\n=== 검사종류 ===\nUnique count: 4\n       Count  Ratio (%)\n검사종류                   \n정기    512547      80.76\n정밀     71045      11.19\n수시     17853       2.81\n설치     33185       5.23\n\n\n=== 검사결과 ===\nUnique count: 17\n                     Count  Ratio (%)\n검사결과                                 \n합격                  241185      38.00\n조건부합격(1개월/서류검사)      94751      14.93\n조건후합격               167415      26.38\n조건부합격(현장시정조치)        24570       3.87\n조건부합격(1개월/현장검사)       2565       0.40\n조건부합격(2개월/현장검사)       6467       1.02\n불합격                   4171       0.66\n조건부합격(차기안전검사)          602       0.09\n조건부합격(2개월/서류검사)      72930      11.49\n차기안전검사                3137       0.49\n조건후불합격                2094       0.33\n조건부합격(12개월이하/서류검사)     363       0.06\n조건부합격(12개월이하/현장검사)     660       0.10\n보완(현장검사)              6756       1.06\n보완후합격                 6751       1.06\n보완(서류검사)                89       0.01\n보완후불합격                 124       0.02\n\n\n=== 검사기관 ===\nUnique count: 58\n                    Count  Ratio (%)\n검사기관                                \n한국승강기안전공단 서울서부지사    12409       1.96\n(재)승강기안전기술연구원 서울지원  23832       3.76\n한국승강기안전공단 서울동부지사    12604       1.99\n(재)한국승강기안전원 서울지원     1569       0.25\n(재)승강기기술진흥원 서울본사       82       0.01\n한국승강기안전공단 서울북부지사    13300       2.10\n한국승강기안전공단 서울강동지사    16478       2.60\n(재)승강기안전기술연구원 경기지원   8401       1.32\n한국승강기안전공단 서울강남지사    10841       1.71\n(재)한국승강기안전진흥원 서울지원   5220       0.82\n한국승강기안전공단 서울서초지사    10915       1.72\n한국승강기안전공단 서울남서지사    14543       2.29\n(재)대한승강기안전재단 경기본원    8428       1.33\n한국승강기안전공단 서울강서지사     8574       1.35\n한국승강기안전공단 강원지사      17020       2.68\n한국승강기안전공단 대전지사      18207       2.87\n(재)대한승강기안전재단 대전지원    2501       0.39\n한국승강기안전공단 세종지사      10212       1.61\n(재)대한승강기안전재단 충남지원    3921       0.62\n한국승강기안전공단 천안지사       8040       1.27\n한국승강기안전공단 충남지사       9667       1.52\n한국승강기안전공단 평택안성지사    13871       2.19\n한국승강기안전공단 충북지사      17244       2.72\n한국승강기안전공단 인천남부지사    17436       2.75\n(재)승강기안전기술연구원 인천지원   2745       0.43\n한국승강기안전공단 인천동부지사    13637       2.15\n한국승강기안전공단 인천서부지사    14953       2.36\n(재)한국승강기안전진흥원 인천지원   1421       0.22\n한국승강기안전공단 고양파주지사    20136       3.17\n(재)승강기기술진흥원 경기지사       93       0.01\n한국승강기안전공단 안양지사      12574       1.98\n한국승강기안전공단 안산지사      12764       2.01\n한국승강기안전공단 수원지사      12356       1.95\n한국승강기안전공단 용인지사      13289       2.09\n한국승강기안전공단 화성오산지사    16866       2.66\n(재)한국승강기안전진흥원 경기본원   6641       1.05\n한국승강기안전공단 성남지사      16940       2.67\n한국승강기안전공단 경기북부지사    25361       4.00\n한국승강기안전공단 광주지사      10882       1.71\n(재)한국승강기안전원 광주지원     4538       0.72\n한국승강기안전공단 전남서부지사    11795       1.86\n한국승강기안전공단 전남동부지사     9975       1.57\n한국승강기안전공단 전북동부지사     8553       1.35\n(재)한국승강기안전원 전북지원     1987       0.31\n한국승강기안전공단 전북서부지사     6492       1.02\n한국승강기안전공단 부산서부지사    16192       2.55\n(재)한국승강기안전원 부산지원     3013       0.47\n한국승강기안전공단 부산북부지사    11457       1.81\n한국승강기안전공단 부산동부지사    10777       1.70\n한국승강기안전공단 경남동부지사    12487       1.97\n한국승강기안전공단 경남서부지사    14187       2.24\n한국승강기안전공단 울산지사      13392       2.11\n한국승강기안전공단 제주지사      11168       1.76\n한국승강기안전공단 대구동부지사    15284       2.41\n(재)승강기기술진흥원 대구지사       23       0.00\n한국승강기안전공단 대구서부지사    14596       2.30\n한국승강기안전공단 경북서부지사    12892       2.03\n한국승강기안전공단 경북동부지사     9849       1.55\n\n\n=== 검사당시승강기구분 ===\nUnique count: 7\n             Count  Ratio (%)\n검사당시승강기구분                    \n엘리베이터       603263      95.06\n소형화물용엘리베이터    2992       0.47\n에스컬레이터       21961       3.46\n무빙워크          3818       0.60\n휠체어리프트        2254       0.36\n주택형엘리베이터       330       0.05\n경사형엘리베이터        12       0.00\n\n\n=== 검사당시승강기형식 ===\nUnique count: 15\n            Count  Ratio (%)\n검사당시승강기형식                   \n권상식        592885      93.42\n유압식         14545       2.29\n스텝식         21961       3.46\n유압식           177       0.03\n팔레트식         3789       0.60\n가이드로프식        309       0.05\n마찰견인식         130       0.02\n포지티브식         202       0.03\n로프현수식          86       0.01\n스크류-너트식       492       0.08\n체인현수식           2       0.00\n벨트식            29       0.00\n체인식             3       0.00\n랙-피니언식          1       0.00\n체인식            19       0.00\n\n\n=== 승강기세부형식 ===\nUnique count: 7\n                Count  Ratio (%)\n승강기세부형식                         \nVVVF           591519      93.21\n교류              15074       2.38\nNaN             25779       4.06\n수직형LIFT(4m이하)    1711       0.27\n경사형LIFT           500       0.08\n직류기어                3       0.00\n수직형LIFT(4m초과)      43       0.01\n직류무기어               1       0.00\n\n\n=== 검사당시승강기종류 ===\nUnique count: 35\n               Count  Ratio (%)\n검사당시승강기종류                      \n승객용           219813      34.64\n화물용            13184       2.08\n소방구조용          28824       4.54\n덤웨이터            2180       0.34\n자동차용            7860       1.24\n장애인용          153668      24.21\n병원용             4326       0.68\n에스컬레이터         21961       3.46\n승객화물용           8621       1.36\n전망용             4320       0.68\n소방구조/장애인용     115436      18.19\n장애/전망용          8818       1.39\n소방구조/장애/승객화물   16956       2.67\n장애/승객화물용       13121       2.07\n소방구조/승객화물용      2197       0.35\n화물용(DW)          812       0.13\n무빙워크            3818       0.60\n수직형휠체어리프트       1754       0.28\n경사형휠체어리프트        500       0.08\n주택엘리베이터          330       0.05\n소방구조/장애/전망용       13       0.00\n전망/병원용            66       0.01\n장애/병원용          4427       0.70\n화물/자동차용          120       0.02\n소방구조/병원용         158       0.02\n피난용               94       0.01\n피난/장애용           992       0.16\n장애/전망/병원용         78       0.01\n소방구조/장애/병원용      113       0.02\n승객용(장애인겸용)        11       0.00\n피난/승객화물용           2       0.00\n장애/승객화물/전망용        6       0.00\n피난/장애/승객화물용       48       0.01\n소방구조/전망용           2       0.00\n피난/장애/병원용          1       0.00\n\n\n=== 설치수시구분 ===\nUnique count: 6\n         Count  Ratio (%)\n설치수시구분                   \nNaN     583592      91.96\n부분교체      5638       0.89\n교체설치     12082       1.90\n용도변경     11575       1.82\n민원요청       639       0.10\n신규설치     21103       3.33\n사고수리         1       0.00\n\n\n\n\n\n‘검사종류’, ‘검사결과’, ’검사기관’은 나중에 사고 관련 데이터와 같이 분석해봐도 좋을 거 같음\n모르는 용어가 많은 변수: ‘검사당시승강기 형식’, ‘승강기세부형식’\n결측치가 많고 의미를 잘 모르겠는 변수: ‘설치수시구분’\n’검사당시승강기형식’은 동일값 전처리가 필요해보임 (3.3 참고)\n\n\n시계열 분석\n\ndf2 = df.copy()\n\ndf2['검사일자'] = pd.to_datetime(df2['검사일자']) # 형식 변환\n\n\ndf2['연월'] = df2['검사일자'].dt.to_period('M') # 연도-월 단위로 그룹화\n\n# 연도/월/일 column 따로 만들기\ndf2['연도'] = df2['검사일자'].dt.year\ndf2['월'] = df2['검사일자'].dt.month\ndf2['일'] = df2['검사일자'].dt.day\n\n\ndf2.head()\n\n\n\n\n\n\n\n\n검사결과이력조회코드\n검사일자\n검사종류\n검사차수\n검사결과\n검사기관\n검사당시승강기구분\n검사당시승강기형식\n승강기세부형식\n검사당시승강기종류\n설치수시구분\n연월\n연도\n월\n일\n\n\n\n\n0\n4300001\n2024-08-23\n정기\n1\n합격\n한국승강기안전공단 서울서부지사\n엘리베이터\n권상식\nVVVF\n승객용\nNaN\n2024-08\n2024\n8\n23\n\n\n1\n8500001\n2024-09-05\n정기\n1\n조건부합격(1개월/서류검사)\n(재)승강기안전기술연구원 서울지원\n엘리베이터\n권상식\nVVVF\n화물용\nNaN\n2024-09\n2024\n9\n5\n\n\n2\n8500001\n2024-09-24\n정기\n2\n조건후합격\n(재)승강기안전기술연구원 서울지원\n엘리베이터\n권상식\nVVVF\n화물용\nNaN\n2024-09\n2024\n9\n24\n\n\n3\n10000015\n2024-12-13\n정기\n1\n합격\n한국승강기안전공단 서울동부지사\n엘리베이터\n권상식\nVVVF\n승객용\nNaN\n2024-12\n2024\n12\n13\n\n\n4\n10000029\n2024-08-06\n정밀\n1\n합격\n한국승강기안전공단 서울동부지사\n엘리베이터\n권상식\nVVVF\n승객용\nNaN\n2024-08\n2024\n8\n6\n\n\n\n\n\n\n\n\n# 1. 전체 날짜 범위 확인\nstart_date = df2['검사일자'].min()\nend_date = df2['검사일자'].max()\nprint(f\"데이터 기간: {start_date.date()} ~ {end_date.date()}\")\n\n데이터 기간: 2024-07-01 ~ 2024-12-31\n\n\n\n데이터의 기간이 반년임\n알고보니 주기성 과거 데이터가 2018년까지 있음\n일단 이 데이터로 진행하고 추가로 주기성 과거 데이터를 불러와서 분석해야할 것 같음\n\n\nimport matplotlib.pyplot as plt\n\nmonthly_counts = df2['연월'].value_counts().sort_index()\n\n# 2. 연월별 검사 수 히스토그램 시각화\nmonthly_counts.plot(kind='bar', figsize=(12, 5))\nplt.title('연-월별 검사 수')\nplt.xlabel('연-월')\nplt.ylabel('검사 수')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n함수 1\n\nimport pandas as pd\nimport plotly.express as px\n\ndef plot_top_institutions(df, date_col='검사일자', group_col='검사기관', top_n=5):\n    # 1. 날짜 열 datetime 변환\n    df = df.copy()\n    df[date_col] = pd.to_datetime(df[date_col])\n    df['연월'] = df[date_col].dt.to_period('M').astype(str)  # '2024-08' 형식 문자열\n\n    # 2. 검사기관별 전체 건수 기준 상위 N개 추출\n    top_insts = df[group_col].value_counts().nlargest(top_n).index\n\n    # 3. 해당 기관만 필터링\n    filtered = df[df[group_col].isin(top_insts)]\n\n    # 4. 연월별 count 집계 (검사기관 × 연월)\n    summary = filtered.groupby(['연월', group_col]).size().reset_index(name='건수')\n\n    # 5. Plotly line plot (interactive)\n    fig = px.line(summary,\n                  x='연월',\n                  y='건수',\n                  color=group_col,\n                  markers=True,\n                  title=f'상위 {top_n} 검사기관의 월별 검사 건수',\n                  labels={'연월': '연-월', '건수': '검사 수', group_col: '검사기관'},\n                  hover_data={'연월': True, '건수': True, group_col: True}\n                 )\n\n    fig.update_layout(\n        xaxis=dict(tickangle=45),\n        hovermode='x unified',\n        width=1000,\n        height=500\n    )\n\n    fig.show()\n\n\n# 사용 예시\nplot_top_institutions(df, top_n=7)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n’(재)승강기안전기술연구원 서울지원’의 추세가 다른 검사기관들과 비교됨\n\n\n\n함수 2\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\ndef plot_top_institutions(df, date_col='검사일자', group_col='검사기관',\n                          top_n=5, period_start=None, period_end=None):\n    df = df.copy()\n    df[date_col] = pd.to_datetime(df[date_col])\n    df['연월'] = df[date_col].dt.to_period('M').astype(str)  # '2024-08' 형식 유지\n\n    if period_start:\n        df = df[df['연월'] &gt;= period_start]\n    if period_end:\n        df = df[df['연월'] &lt;= period_end]\n\n    # 전체 건수 기준 상위 검사기관 추출\n    top_groups = df[group_col].value_counts().nlargest(top_n)\n    df = df[df[group_col].isin(top_groups.index)]\n\n    # 월별 건수 요약\n    summary = df.groupby(['연월', group_col]).size().reset_index(name='건수')\n\n    # 그래프 생성\n    fig = go.Figure()\n\n    for group in top_groups.index:\n        sub_df = summary[summary[group_col] == group]\n        fig.add_trace(go.Scatter(\n            x=sub_df['연월'],\n            y=sub_df['건수'],\n            mode='lines+markers',\n            name=group,\n            hovertemplate=(\n                f'&lt;b&gt;검사기관: {group}&lt;/b&gt;&lt;br&gt;' +\n                '연월: %{x}&lt;br&gt;검사 수: %{y}&lt;extra&gt;&lt;/extra&gt;'\n            )\n        ))\n\n    fig.update_layout(\n        title=f'상위 {top_n} 검사기관의 월별 검사 건수',\n        xaxis_title='연월',\n        yaxis_title='검사 수',\n        xaxis_tickangle=0,\n        xaxis=dict(type='category'),  # 날짜를 문자로 고정\n        hovermode='closest',\n        width=1000,\n        height=500\n    )\n\n    fig.show()\n\n\n# 사용 예시\nplot_top_institutions(\n    df,\n    top_n=7,\n    period_start='2024-07',\n    period_end='2024-12'\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n함수 3\n\n# 개선된 함수: 원하는 기관 직접 지정 기능 포함\ndef plot_top_institutions(df, date_col='검사일자', group_col='검사기관',\n                          top_n=5, target_institutions=None,\n                          period_start=None, period_end=None):\n    df = df.copy()\n    df[date_col] = pd.to_datetime(df[date_col])\n    df['연월'] = df[date_col].dt.to_period('M').astype(str)\n\n    # 1. 기간 필터링\n    if period_start:\n        df = df[df['연월'] &gt;= period_start]\n    if period_end:\n        df = df[df['연월'] &lt;= period_end]\n\n    # 2. 기관 필터링\n    if target_institutions is not None:\n        target_list = target_institutions\n    else:\n        target_list = df[group_col].value_counts().nlargest(top_n).index.tolist()\n\n    df = df[df[group_col].isin(target_list)]\n\n    # 3. 연월별 집계\n    summary = df.groupby(['연월', group_col]).size().reset_index(name='건수')\n\n    # 4. 그래프 생성\n    fig = go.Figure()\n\n    for group in target_list:\n        sub_df = summary[summary[group_col] == group]\n        fig.add_trace(go.Scatter(\n            x=sub_df['연월'],\n            y=sub_df['건수'],\n            mode='lines+markers',\n            name=group,\n            hovertemplate=(\n                f'&lt;b&gt;검사기관: {group}&lt;/b&gt;&lt;br&gt;' +\n                '연월: %{x}&lt;br&gt;검사 수: %{y}&lt;extra&gt;&lt;/extra&gt;'\n            )\n        ))\n\n    fig.update_layout(\n        title=f'{\"사용자 지정\" if target_institutions else f\"상위 {top_n}\"} 검사기관의 월별 검사 건수',\n        xaxis_title='연월',\n        yaxis_title='검사 수',\n        xaxis_tickangle=0,\n        xaxis=dict(type='category'),\n        hovermode='closest',\n        width=1000,\n        height=500\n    )\n\n    fig.show()\n\n\n# 사용 예시 1\nplot_top_institutions(\n    df,\n    target_institutions=[\n        '(재)승강기안전기술연구원 서울지원',\n        '한국승강기안전공단 경기북부지사'\n    ],\n    period_start='2024-08',\n    period_end='2024-12'\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# 사용 예시 2\nplot_top_institutions(df, top_n=5)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n함수 4\n\n# 함수: 특정 월의 일자별 검사 건수 시각화\n\ndef plot_daily_by_institution(df, year_month, date_col='검사일자', group_col='검사기관', top_n=5):\n    df = df.copy()\n    df[date_col] = pd.to_datetime(df[date_col])\n    df['연월'] = df[date_col].dt.to_period('M').astype(str)\n\n    # 1. 해당 연월 필터링\n    df = df[df['연월'] == year_month]\n\n    # 2. 전체 건수 기준 상위 검사기관 추출\n    top_groups = df[group_col].value_counts().nlargest(top_n).index\n    df = df[df[group_col].isin(top_groups)]\n\n    # 3. 일자 및 요일 생성\n    df['일자'] = df[date_col].dt.date\n    df['요일'] = df[date_col].dt.day_name()  # Monday, Tuesday, ...\n\n    # 4. 요약 테이블\n    summary = df.groupby(['일자', '요일', group_col]).size().reset_index(name='건수')\n\n    # 5. 그래프 생성\n    fig = go.Figure()\n\n    for group in top_groups:\n        sub_df = summary[summary[group_col] == group]\n\n        fig.add_trace(go.Scatter(\n            x=sub_df['일자'].astype(str),\n            y=sub_df['건수'],\n            mode='lines+markers',\n            name=group,\n            customdata=sub_df[['요일']],\n            hovertemplate=(\n                f'&lt;b&gt;검사기관: {group}&lt;/b&gt;&lt;br&gt;' +\n                '일자: %{x}&lt;br&gt;' +\n                '요일: %{customdata[0]}&lt;br&gt;' +\n                '검사 수: %{y}&lt;extra&gt;&lt;/extra&gt;'\n            )\n        ))\n\n    fig.update_layout(\n        title=f'{year_month} 일자별 검사 건수 (상위 {top_n} 기관)',\n        xaxis_title='일자',\n        yaxis_title='검사 수',\n        xaxis_tickangle=45,\n        xaxis=dict(type='category'),\n        hovermode='closest',\n        width=1000,\n        height=500\n    )\n\n    fig.show()\n\n\n# 사용 예시\nplot_daily_by_institution(df, '2024-08', top_n=7)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n함수 5\n\n# 개선된 함수: 원하는 기관 직접 지정 기능 포함\nimport pandas as pd\nimport plotly.graph_objects as go\n\ndef plot_daily_by_institution(df, year_month, date_col='검사일자', group_col='검사기관',\n                              top_n=5, target_institutions=None):\n    df = df.copy()\n    df[date_col] = pd.to_datetime(df[date_col])\n    df['연월'] = df[date_col].dt.to_period('M').astype(str)\n\n    # 1. 해당 월만 필터링\n    df = df[df['연월'] == year_month]\n\n    # 2. 검사기관 지정\n    if target_institutions is not None:\n        target_list = target_institutions\n    else:\n        target_list = df[group_col].value_counts().nlargest(top_n).index.tolist()\n\n    df = df[df[group_col].isin(target_list)]\n\n    # 3. 일자 및 요일 추출\n    df['일자'] = df[date_col].dt.date\n    df['요일'] = df[date_col].dt.day_name()\n\n    # 4. 집계\n    summary = df.groupby(['일자', '요일', group_col]).size().reset_index(name='건수')\n\n    # 5. 그래프 생성\n    fig = go.Figure()\n\n    for group in target_list:\n        sub_df = summary[summary[group_col] == group]\n\n        fig.add_trace(go.Scatter(\n            x=sub_df['일자'].astype(str),\n            y=sub_df['건수'],\n            mode='lines+markers',\n            name=group,\n            customdata=sub_df[['요일']],\n            hovertemplate=(\n                f'&lt;b&gt;검사기관: {group}&lt;/b&gt;&lt;br&gt;' +\n                '일자: %{x}&lt;br&gt;' +\n                '요일: %{customdata[0]}&lt;br&gt;' +\n                '검사 수: %{y}&lt;extra&gt;&lt;/extra&gt;'\n            )\n        ))\n\n    fig.update_layout(\n        title=f'{year_month} 일자별 검사 건수 ({ \"사용자 지정\" if target_institutions else f\"상위 {top_n} 기관\"})',\n        xaxis_title='일자',\n        yaxis_title='검사 수',\n        xaxis_tickangle=45,\n        xaxis=dict(type='category'),\n        hovermode='closest',\n        width=1000,\n        height=500\n    )\n\n    fig.show()\n\n\n# 사용 예시 1\nplot_daily_by_institution(\n    df,\n    year_month='2024-08',\n    target_institutions=['(재)승강기안전기술연구원 서울지원', '한국승강기안전공단 서울북부지사']\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# 사용 예시 2\nplot_daily_by_institution(df, '2024-08', top_n=5)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "posts/c_03.html#기술통계-각-column의-기술통계-평균값-최대값-최솟값-최빈값-분위수-등",
    "href": "posts/c_03.html#기술통계-각-column의-기술통계-평균값-최대값-최솟값-최빈값-분위수-등",
    "title": "3. 승강기 검사 결과",
    "section": "4. (기술통계) 각 column의 기술통계 (평균값, 최대값, 최솟값, 최빈값, 분위수 등)",
    "text": "4. (기술통계) 각 column의 기술통계 (평균값, 최대값, 최솟값, 최빈값, 분위수 등)\n\n# 수치형 변수만 선택\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 통계 요약 저장용 리스트\nstat_list = []\n\nfor col in numeric_cols:\n    desc = df[col].describe()\n    mode = df[col].mode(dropna=False).values[0]  # 최빈값 (여러 개 중 첫 번째 선택)\n    mode_all = df[col].mode(dropna=False).tolist()  # 최빈값 리스트 형태로 저장\n\n    stat_list.append({\n        'Feature': col,\n        'Count': desc['count'],\n        'Mean': desc['mean'],\n        'Std': desc['std'],\n        'Min': desc['min'],\n        '25%': desc['25%'],\n        'Median (50%)': desc['50%'],\n        '75%': desc['75%'],\n        'Max': desc['max'],\n        'Mode': mode,\n        'Mode_all': mode_all\n    })\n\n# DataFrame으로 정리\nstats_df = pd.DataFrame(stat_list)\nstats_df\n\n\n\n\n\n\n\n\nFeature\nCount\nMean\nStd\nMin\n25%\nMedian (50%)\n75%\nMax\nMode\nMode_all\n\n\n\n\n0\n검사결과이력조회코드\n634630.0\n4.213546e+07\n1.873299e+07\n4300001.0\n30501554.0\n44001818.5\n56006944.75\n79900109.0\n13408948\n[13408948, 13409063, 15010874, 15712290, 15712...\n\n\n1\n검사차수\n634630.0\n1.282875e+00\n4.503966e-01\n1.0\n1.0\n1.0\n2.00\n2.0\n1\n[1]\n\n\n\n\n\n\n\n\nstats_df.loc[stats_df['Feature'] == '검사결과이력조회코드', 'Mode_all'].values\n\narray([list([13408948, 13409063, 15010874, 15712290, 15712440, 15712441, 42901639, 42901640, 43005715, 70201335, 70201977])],\n      dtype=object)\n\n\n\nstats_df.loc[stats_df['Feature'] == '검사결과이력조회코드', 'Mode_all'].values[0]\n\n[13408948,\n 13409063,\n 15010874,\n 15712290,\n 15712440,\n 15712441,\n 42901639,\n 42901640,\n 43005715,\n 70201335,\n 70201977]\n\n\n\nstats_df.loc[stats_df['Feature'] == '검사결과이력조회코드', 'Mode_all'].values[0][0] # 첫번째 원소만\n\n13408948"
  },
  {
    "objectID": "posts/c_03.html#상관관계-상관관계-매트릭스",
    "href": "posts/c_03.html#상관관계-상관관계-매트릭스",
    "title": "3. 승강기 검사 결과",
    "section": "5. (상관관계) 상관관계 매트릭스",
    "text": "5. (상관관계) 상관관계 매트릭스\n\n# 수치형 변수 간 상관관계 매트릭스\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 수치형 변수만 선택\nnumeric_df = df.select_dtypes(include=['float64', 'int64'])\n\n# 상관계수 계산\ncorr_matrix = numeric_df.corr()\n\n# 시각화\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", square=True)\nplt.title(\"Numeric Feature Correlation Matrix\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n당연히 두 변수는 상관 관계가 없음"
  },
  {
    "objectID": "posts/c_03.html#시각화-histogram-bar-graph-box-plot-등",
    "href": "posts/c_03.html#시각화-histogram-bar-graph-box-plot-등",
    "title": "3. 승강기 검사 결과",
    "section": "6. (시각화) histogram, bar graph, box plot 등",
    "text": "6. (시각화) histogram, bar graph, box plot 등\n\nimport matplotlib.pyplot as plt\n\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 전체 수치형 변수에 대해 히스토그램 그리기\nfor col in numeric_cols:\n    plt.figure(figsize=(6, 4))\n    plt.hist(df[col].dropna(), bins=30, edgecolor='black')\n    plt.title(f'Histogram of {col}')\n    plt.xlabel(col)\n    plt.ylabel('Frequency')\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbins를 증가시키면\n\n\nimport matplotlib.pyplot as plt\n\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 전체 수치형 변수에 대해 히스토그램 그리기\nfor col in numeric_cols:\n    plt.figure(figsize=(6, 4))\n    plt.hist(df[col].dropna(), bins=60, edgecolor='black')\n    plt.title(f'Histogram of {col}')\n    plt.xlabel(col)\n    plt.ylabel('Frequency')\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\n# cat_cols = df.select_dtypes(include=['object']).columns\n\n# # 전체 범주형 변수에 대해 히스토그램 그리기\n\n# for col in cat_cols:\n#     plt.figure(figsize=(6, 4))\n#     ax = sns.countplot(data=df, x=col, order=df[col].value_counts().index, color='salmon')\n\n#     total = len(df)\n\n#     for p in ax.patches:\n#         count = int(p.get_height())\n#         percent = 100 * count / total\n#         label = f'{count} ({percent:.1f}%)'\n\n#         # 텍스트 위치: 막대 안쪽 상단 (중앙 정렬)\n#         ax.annotate(label,\n#                     (p.get_x() + p.get_width() / 2., p.get_height() * 0.95),\n#                     ha='center', va='top',\n#                     fontsize=9, color='white', weight='bold')\n\n#     plt.title(f'Bar Graph of {col} (Count + Ratio)')\n#     plt.xticks(rotation=45)\n#     plt.tight_layout()\n#     plt.show()\n\n\n의미가 없어서 실행 X (날짜 데이터를 제외하고 그려도 알아보기 어려움)\n\n\nimport matplotlib.pyplot as plt\n\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 특정 변수에 따른 수치형 변수 분포 비교\nfor col in numeric_cols:\n    plt.figure(figsize=(6, 4))\n    sns.boxplot(data=df, x='검사종류', y=col)\n    plt.title(f'Boxplot of {col} by 검사종류')\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n’검사종류’가 ’설치’이면 대부분 ’검사차수’가 1차?\n’검사차수’는 값이 1 또는 2 뿐이라 상자그림이 큰 의미를 가지지 않음\n\n\n# # 특정 변수 중 특정 값들에 따른 수치형 변수들 분포 비교\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\n# # 파라미터 설정\n# group_col = '검사종류'  # 비교할 범주형 변수\n# target_values = ['설치']  # 특정 값들\n# numeric_cols = ['검사차수']  # 수치형 변수 목록\n\n# # 필터링된 데이터프레임\n# filtered_df = df[df[group_col].isin(target_values)]\n\n# # 반복해서 boxplot 그리기\n# for col in numeric_cols:\n#     plt.figure(figsize=(6, 4))\n#     sns.boxplot(data=filtered_df, x=group_col, y=col)\n#     plt.title(f'Boxplot of {col} by {group_col} ({\", \".join(target_values)})')\n#     plt.tight_layout()\n#     plt.show()\n\n\n# 카테고리 + 수치형 변수 조합 분포표\n# 1. 개수 집계\ncount_df = df.groupby(['검사종류', '검사차수']).size().reset_index(name='Count')\n\n# 2. 검사종류별 총합 기준 비율 계산\ncount_df['비율 (%)'] = count_df.groupby('검사종류')['Count'].transform(lambda x: (x / x.sum()) * 100).round(2)\n\n# 3. 확인\nprint(count_df)\n\n  검사종류  검사차수   Count  비율 (%)\n0   설치     1   26310   79.28\n1   설치     2    6875   20.72\n2   수시     1   11108   62.22\n3   수시     2    6745   37.78\n4   정기     1  368629   71.92\n5   정기     2  143918   28.08\n6   정밀     1   49062   69.06\n7   정밀     2   21983   30.94\n\n\n\n모든 검사종류에서 1차 검사가 약 60~80% 정도를 차지함\n\n대부분의 검사는 1차에서 마무리된다는 시사점\n\n정기 검사는 Count가 월등히 높으므로 주된 검사 유형이라는 정량적 증거\n수시 검사에서 2차 비율 37.78%는 상대적으로 다른 유형보다 2차 재검이 많은 것처럼 보임\n\n수시검사는 1차에서 문제가 생겨 재검 비율이 높은 유형일 수 있음\n\n나중에 이 데이터를 이전의 승강기 검사 결과들과 합치고 사고 데이터와 같이 분석하면 좋을 것 같음"
  },
  {
    "objectID": "posts/c_03.html#교차표-범주형-변수-간의-관계",
    "href": "posts/c_03.html#교차표-범주형-변수-간의-관계",
    "title": "3. 승강기 검사 결과",
    "section": "7. (교차표) 범주형 변수 간의 관계",
    "text": "7. (교차표) 범주형 변수 간의 관계\n\n# '검사종류'에 따른 '검사결과' 비율\nprint(\"=== 검사종류 vs 검사결과 ===\")\nratio = df.groupby('검사종류')['검사결과'].value_counts(normalize=True).unstack()\nratio.head()\n\n=== 검사종류 vs 검사결과 ===\n\n\n\n\n\n\n\n\n검사결과\n보완(서류검사)\n보완(현장검사)\n보완후불합격\n보완후합격\n불합격\n조건부합격(12개월이하/서류검사)\n조건부합격(12개월이하/현장검사)\n조건부합격(1개월/서류검사)\n조건부합격(1개월/현장검사)\n조건부합격(2개월/서류검사)\n조건부합격(2개월/현장검사)\n조건부합격(차기안전검사)\n조건부합격(현장시정조치)\n조건후불합격\n조건후합격\n차기안전검사\n합격\n\n\n검사종류\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n설치\n0.002682\n0.203586\n0.003737\n0.203435\n0.048486\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.538074\n\n\n수시\nNaN\nNaN\nNaN\nNaN\n0.021845\n0.000056\n0.000448\n0.003529\n0.119980\n0.004033\n0.247801\nNaN\n0.012267\n0.004425\n0.373159\n0.000224\n0.212233\n\n\n정기\nNaN\nNaN\nNaN\nNaN\n0.002950\n0.000634\n0.001155\n0.171274\n0.000611\n0.113217\n0.000496\n0.000708\n0.040597\n0.000993\n0.278800\n0.000997\n0.387568\n\n\n정밀\nNaN\nNaN\nNaN\nNaN\n0.009290\n0.000521\n0.000845\n0.097150\n0.001548\n0.208727\n0.025181\n0.003364\n0.049870\n0.021198\n0.251320\n0.036906\n0.294081\n\n\n\n\n\n\n\n\n각 검사종류별(기준축) 검사결과 비율\n행 기준 해석: 이 검사종류에서 어떤 결과가 나왔는가?\n사용 목적: 검사종류별 합격률/불합격률 등\n\n\npd.crosstab(df['검사결과'], df['검사종류'], normalize='index')\n\n\n\n\n\n\n\n검사종류\n설치\n수시\n정기\n정밀\n\n\n검사결과\n\n\n\n\n\n\n\n\n보완(서류검사)\n1.000000\n0.000000\n0.000000\n0.000000\n\n\n보완(현장검사)\n1.000000\n0.000000\n0.000000\n0.000000\n\n\n보완후불합격\n1.000000\n0.000000\n0.000000\n0.000000\n\n\n보완후합격\n1.000000\n0.000000\n0.000000\n0.000000\n\n\n불합격\n0.385759\n0.093503\n0.362503\n0.158235\n\n\n조건부합격(12개월이하/서류검사)\n0.000000\n0.002755\n0.895317\n0.101928\n\n\n조건부합격(12개월이하/현장검사)\n0.000000\n0.012121\n0.896970\n0.090909\n\n\n조건부합격(1개월/서류검사)\n0.000000\n0.000665\n0.926492\n0.072844\n\n\n조건부합격(1개월/현장검사)\n0.000000\n0.835088\n0.122027\n0.042885\n\n\n조건부합격(2개월/서류검사)\n0.000000\n0.000987\n0.795681\n0.203332\n\n\n조건부합격(2개월/현장검사)\n0.000000\n0.684088\n0.039276\n0.276635\n\n\n조건부합격(차기안전검사)\n0.000000\n0.000000\n0.602990\n0.397010\n\n\n조건부합격(현장시정조치)\n0.000000\n0.008913\n0.846886\n0.144200\n\n\n조건후불합격\n0.000000\n0.037727\n0.243075\n0.719198\n\n\n조건후합격\n0.000000\n0.039793\n0.853556\n0.106651\n\n\n차기안전검사\n0.000000\n0.001275\n0.162894\n0.835830\n\n\n합격\n0.074034\n0.015710\n0.823629\n0.086626\n\n\n\n\n\n\n\n\n각 검사결과별(기준축) 검사종류 비율\n행 기준 해석: 이 검사결과는 어떤 검사종류에서 나왔는가?\n사용 목적: 특정 결과가 주로 어느 검사에서 발생하는지 등\n\n\n함수 1\n\ndef grouped_ratio_table(df, group_col, target_col, normalize=True):\n    \"\"\"\n    group_col 기준으로 target_col의 비율(또는 건수)을 cross-tab 형태로 반환\n\n    Parameters:\n    - df: DataFrame\n    - group_col: 그룹 기준 변수 (ex: '지역')\n    - target_col: 비율을 계산할 대상 변수 (ex: '승강기종류')\n    - normalize: True면 비율, False면 건수\n\n    Returns:\n    - DataFrame: 행 = group_col, 열 = target_col\n    \"\"\"\n    grouped = (\n        df.groupby(group_col)[target_col]\n        .value_counts(normalize=normalize)\n        .unstack()\n    )\n    return grouped\n\n\n# 비율 사용 예시\nprint(\"=== 검사당시승강기구분 vs 검사결과 비율 ===\")\ngrouped_ratio_table(df, '검사당시승강기구분', '검사결과')\n\n=== 검사당시승강기구분 vs 검사결과 비율 ===\n\n\n\n\n\n\n\n\n검사결과\n보완(서류검사)\n보완(현장검사)\n보완후불합격\n보완후합격\n불합격\n조건부합격(12개월이하/서류검사)\n조건부합격(12개월이하/현장검사)\n조건부합격(1개월/서류검사)\n조건부합격(1개월/현장검사)\n조건부합격(2개월/서류검사)\n조건부합격(2개월/현장검사)\n조건부합격(차기안전검사)\n조건부합격(현장시정조치)\n조건후불합격\n조건후합격\n차기안전검사\n합격\n\n\n검사당시승강기구분\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n경사형엘리베이터\nNaN\n0.083333\nNaN\n0.083333\n0.166667\nNaN\nNaN\n0.083333\nNaN\nNaN\nNaN\nNaN\n0.166667\n0.083333\n0.083333\nNaN\n0.250000\n\n\n무빙워크\nNaN\n0.007334\nNaN\n0.006810\n0.004976\n0.018334\n0.004191\n0.129387\n0.010739\n0.061289\n0.003667\n0.002619\n0.025668\n0.005238\n0.194081\n0.032478\n0.493190\n\n\n소형화물용엘리베이터\nNaN\n0.003342\nNaN\n0.003008\n0.020388\nNaN\nNaN\n0.109960\n0.003008\n0.007687\n0.001337\nNaN\n0.048463\n0.001337\n0.122326\nNaN\n0.679144\n\n\n에스컬레이터\n0.000182\n0.019717\n0.000182\n0.018123\n0.007650\n0.001366\n0.000683\n0.155822\n0.007513\n0.033742\n0.003279\n0.001594\n0.070124\n0.002869\n0.198124\n0.003370\n0.475661\n\n\n엘리베이터\n0.000134\n0.010340\n0.000177\n0.010405\n0.006355\n0.000436\n0.001043\n0.149623\n0.003891\n0.119187\n0.010569\n0.000923\n0.037640\n0.003324\n0.267978\n0.004872\n0.373103\n\n\n주택형엘리베이터\n0.006061\n0.048485\n0.003030\n0.051515\n0.018182\nNaN\nNaN\n0.139394\n0.003030\n0.009091\n0.003030\nNaN\n0.042424\n0.003030\n0.163636\nNaN\n0.509091\n\n\n휠체어리프트\n0.000887\n0.013310\n0.005324\n0.010204\n0.035936\nNaN\nNaN\n0.087400\n0.000887\n0.012422\nNaN\nNaN\n0.028394\nNaN\n0.106921\nNaN\n0.698314\n\n\n\n\n\n\n\n\n어떤 승강기 종류가 불합격률이 높은가 → 설계/유지관리 문제 포착 가능\n\n\n# # 건수 사용 예시\n# print(\"=== 검사당시승강기구분 vs 검사결과 건수 ===\")\n# grouped_ratio_table(df, '검사당시승강기구분', '검사결과', normalize=False)\n\n\n\n함수 2\n\ndef filter_crosstab(df, group_col, target_col,\n                    row_values=None, col_values=None,\n                    normalize=True):\n    \"\"\"\n    전체 교차표 생성 후, 특정 행(row)/열(column)만 필터링\n    \n    Parameters:\n    - df: 전체 DataFrame\n    - group_col: 행 기준 (예: '지역')\n    - target_col: 열 기준 (예: '승강기종류')\n    - row_values: group_col 중 보고 싶은 값 리스트\n    - col_values: target_col 중 보고 싶은 값 리스트\n    - normalize: True면 비율, False면 건수\n    \n    Returns:\n    - 필터된 교차표 DataFrame\n    \"\"\"\n    table = df.groupby(group_col)[target_col].value_counts(normalize=normalize).unstack()\n\n    if row_values is not None:\n        table = table.loc[table.index.intersection(row_values)]\n    if col_values is not None:\n        table = table.loc[:, table.columns.intersection(col_values)]\n        \n    return table\n\n\n# 비율 사용 예시\nfilter_crosstab(df,\n                group_col='검사당시승강기종류',\n                target_col='검사결과',\n                row_values=['승객용', '화물용', '소방구조용', '장애인용', '에스컬레이터', '승객용(장애인겸용)'],\n                col_values=['합격', '조건부합격', '불합격', '보완후합격', '보완후불합격'],\n                normalize=True)\n\n\n\n\n\n\n\n검사결과\n보완후불합격\n보완후합격\n불합격\n합격\n\n\n검사당시승강기종류\n\n\n\n\n\n\n\n\n소방구조용\nNaN\n0.004475\n0.003088\n0.312795\n\n\n승객용\n0.000127\n0.011382\n0.006246\n0.415503\n\n\n승객용(장애인겸용)\nNaN\n0.090909\n0.090909\n0.272727\n\n\n에스컬레이터\n0.000182\n0.018123\n0.007650\n0.475661\n\n\n장애인용\n0.000345\n0.015592\n0.007523\n0.394988\n\n\n화물용\n0.000152\n0.018052\n0.020252\n0.376972\n\n\n\n\n\n\n\n\n# 건수 사용 예시\nfilter_crosstab(df,\n                group_col='검사당시승강기종류',\n                target_col='검사결과',\n                row_values=['승객용', '화물용', '소방구조용', '장애인용', '에스컬레이터', '승객용(장애인겸용)'],\n                col_values=['합격', '조건부합격', '불합격', '보완후합격', '보완후불합격'],\n                normalize=False)\n\n\n\n\n\n\n\n검사결과\n보완후불합격\n보완후합격\n불합격\n합격\n\n\n검사당시승강기종류\n\n\n\n\n\n\n\n\n소방구조용\nNaN\n129.0\n89.0\n9016.0\n\n\n승객용\n28.0\n2502.0\n1373.0\n91333.0\n\n\n승객용(장애인겸용)\nNaN\n1.0\n1.0\n3.0\n\n\n에스컬레이터\n4.0\n398.0\n168.0\n10446.0\n\n\n장애인용\n53.0\n2396.0\n1156.0\n60697.0\n\n\n화물용\n2.0\n238.0\n267.0\n4970.0\n\n\n\n\n\n\n\n\n\n함수 3\n\ndef merged_ratio_count_table(df, group_col, target_col,\n                              row_values=None, col_values=None,\n                              sort_mode='suffix-first',\n                              order=['비율', '건수']):\n    \"\"\"\n    비율 교차표와 건수 교차표를 병합하고 선택한 행/열만 필터링, 열 순서 정렬까지 하나의 함수로 처리\n\n    Parameters:\n    - df: DataFrame\n    - group_col: 행 기준 변수 (예: '지역')\n    - target_col: 열 기준 변수 (예: '승강기종류')\n    - row_values: 선택할 행 인덱스 (None이면 전체)\n    - col_values: 선택할 열 값 (None이면 전체)\n    - sort_mode: 열 정렬 방식 - 'suffix-first' 또는 'prefix-first'\n        - 'suffix-first': 항목별로 비율 → 건수 순서로 정렬  \n          예: ['승객용_비율', '승객용_건수', '화물용_비율', '화물용_건수']\n        - 'prefix-first': 비율 열들을 모두 먼저, 그다음 건수 열들을 정렬  \n          예: ['승객용_비율', '화물용_비율', '승객용_건수', '화물용_건수']\n    - order: 접미사 순서 지정 (허용된 값만 가능: ['비율', '건수'] 또는 ['건수', '비율'])\n\n    Returns:\n    - 병합된 정렬된 교차표 DataFrame\n    \"\"\"\n\n    from collections import defaultdict\n\n    # === Step 0. order 유효성 검사 ===\n    if set(order) != {'비율', '건수'} or len(order) != 2:\n        raise ValueError(\"order must be exactly ['비율', '건수'] or ['건수', '비율']\")\n\n    # === Step 1. 전체 교차표 생성 (비율, 건수) ===\n    ratio = df.groupby(group_col)[target_col].value_counts(normalize=True).unstack()\n    count = df.groupby(group_col)[target_col].value_counts(normalize=False).unstack()\n\n    # === Step 2. 열 필터링 ===\n    if col_values is not None:\n        ratio = ratio.loc[:, ratio.columns.intersection(col_values)]\n        count = count.loc[:, count.columns.intersection(col_values)]\n\n    # === Step 3. 열 이름 변경 ===\n    ratio.columns = [f\"{col}_비율\" for col in ratio.columns]\n    count.columns = [f\"{col}_건수\" for col in count.columns]\n\n    # === Step 4. 병합 ===\n    merged = pd.concat([ratio, count], axis=1)\n\n    # === Step 5. 열 순서 재정렬 ===\n    prefix_groups = defaultdict(dict)\n    for col in merged.columns:\n        if '_' in col:\n            prefix, suffix = col.rsplit('_', 1)\n            prefix_groups[prefix][suffix] = col\n\n    ordered_cols = []\n    if sort_mode == 'suffix-first':\n        for prefix in sorted(prefix_groups):\n            for suffix in order:\n                if suffix in prefix_groups[prefix]:\n                    ordered_cols.append(prefix_groups[prefix][suffix])\n    elif sort_mode == 'prefix-first':\n        for suffix in order:\n            for prefix in sorted(prefix_groups):\n                if suffix in prefix_groups[prefix]:\n                    ordered_cols.append(prefix_groups[prefix][suffix])\n    else:\n        raise ValueError(\"sort_mode must be 'suffix-first' or 'prefix-first'\")\n\n    merged = merged[ordered_cols]\n\n    # === Step 6. 행 필터링 ===\n    if row_values is not None:\n        merged = merged.loc[merged.index.intersection(row_values)]\n\n    return merged\n\n\n# 사용 예시\nmerged_ratio_count_table(\n    df,\n    group_col='검사기관',\n    target_col='검사결과',\n    row_values=[\n    \"(재)승강기안전기술연구원 서울지원\",\n    \"한국승강기안전공단 경기북부지사\",\n    \"한국승강기안전공단 고양파주지사\",\n    \"한국승강기안전공단 화성오산지사\",\n    \"한국승강기안전공단 대전지사\",\n    \"한국승강기안전공단 충북지사\",\n    \"한국승강기안전공단 성남지사\"\n    ],\n    col_values=['합격', '조건부합격', '불합격', '보완후합격', '보완후불합격'],\n    sort_mode='prefix-first',\n    order=['비율', '건수']\n)\n\n\n\n\n\n\n\n\n보완후불합격_비율\n보완후합격_비율\n불합격_비율\n합격_비율\n보완후불합격_건수\n보완후합격_건수\n불합격_건수\n합격_건수\n\n\n검사기관\n\n\n\n\n\n\n\n\n\n\n\n\n(재)승강기안전기술연구원 서울지원\nNaN\nNaN\n0.002644\n0.396316\nNaN\nNaN\n63.0\n9445.0\n\n\n한국승강기안전공단 경기북부지사\n0.000079\n0.009148\n0.005165\n0.210757\n2.0\n232.0\n131.0\n5345.0\n\n\n한국승강기안전공단 고양파주지사\n0.000248\n0.012813\n0.007549\n0.286551\n5.0\n258.0\n152.0\n5770.0\n\n\n한국승강기안전공단 대전지사\n0.000110\n0.015049\n0.004888\n0.426704\n2.0\n274.0\n89.0\n7769.0\n\n\n한국승강기안전공단 성남지사\n0.000118\n0.009091\n0.009209\n0.384652\n2.0\n154.0\n156.0\n6516.0\n\n\n한국승강기안전공단 충북지사\n0.000058\n0.012468\n0.005277\n0.437486\n1.0\n215.0\n91.0\n7544.0\n\n\n한국승강기안전공단 화성오산지사\n0.000415\n0.022175\n0.008182\n0.303925\n7.0\n374.0\n138.0\n5126.0"
  },
  {
    "objectID": "posts/c_03.html#결측치-처리",
    "href": "posts/c_03.html#결측치-처리",
    "title": "3. 승강기 검사 결과",
    "section": "1. 결측치 처리",
    "text": "1. 결측치 처리\n\n필요시 할 예정"
  },
  {
    "objectID": "posts/c_03.html#이상치-처리",
    "href": "posts/c_03.html#이상치-처리",
    "title": "3. 승강기 검사 결과",
    "section": "2. 이상치 처리",
    "text": "2. 이상치 처리\n\n필요시 할 예정"
  },
  {
    "objectID": "posts/c_03.html#동일값-처리",
    "href": "posts/c_03.html#동일값-처리",
    "title": "3. 승강기 검사 결과",
    "section": "3. 동일값 처리",
    "text": "3. 동일값 처리\n\ndf['검사당시승강기형식'].unique()\n\narray(['권상식', '유압식', '스텝식', '유압식 ', '팔레트식', '가이드로프식', '마찰견인식', '포지티브식',\n       '로프현수식', '스크류-너트식', '체인현수식', '벨트식', '체인식  ', '랙-피니언식', '체인식'],\n      dtype=object)\n\n\n\ndf['검사당시승강기형식'].value_counts()\n\n검사당시승강기형식\n권상식        592885\n스텝식         21961\n유압식         14545\n팔레트식         3789\n스크류-너트식       492\n가이드로프식        309\n포지티브식         202\n유압식           177\n마찰견인식         130\n로프현수식          86\n벨트식            29\n체인식            19\n체인식             3\n체인현수식           2\n랙-피니언식          1\nName: count, dtype: int64\n\n\n\ndf['검사당시승강기형식'].str.strip().unique()\n\narray(['권상식', '유압식', '스텝식', '팔레트식', '가이드로프식', '마찰견인식', '포지티브식', '로프현수식',\n       '스크류-너트식', '체인현수식', '벨트식', '체인식', '랙-피니언식'], dtype=object)\n\n\n\ndf['검사당시승강기형식'].str.strip().value_counts()\n\n검사당시승강기형식\n권상식        592885\n스텝식         21961\n유압식         14722\n팔레트식         3789\n스크류-너트식       492\n가이드로프식        309\n포지티브식         202\n마찰견인식         130\n로프현수식          86\n벨트식            29\n체인식            22\n체인현수식           2\n랙-피니언식          1\nName: count, dtype: int64\n\n\n\n# df['검사당시승강기형식'] = df['검사당시승강기형식'].str.strip()"
  },
  {
    "objectID": "posts/c_03.html#section",
    "href": "posts/c_03.html#section",
    "title": "3. 승강기 검사 결과",
    "section": "1.",
    "text": "1.\n승강기 형식은 구동 방식과 구조에 따라 다양한 형태로 나뉩니다. 아래는 각 형식에 대한 간단한 설명입니다:\n\n권상식: 전동기를 이용하여 와이어 로프를 감거나 풀어 승강기를 이동시키는 방식입니다. 주로 고층 건물에서 사용됩니다.\n유압식: 유압 실린더를 이용하여 승강기를 상승시키며, 중소형 건물에 적합합니다.\n스텝식: 일정한 간격으로 정지하는 방식으로, 주로 에스컬레이터나 무빙워크에 적용됩니다.\n팔레트식: 화물 운반용으로, 팔레트를 이용하여 물품을 승강시키는 방식입니다.\n가이드로프식: 승강기의 이동을 안내하는 로프를 사용하는 방식으로, 안정성을 높입니다.\n마찰견인식: 마찰력을 이용하여 로프를 견인하는 방식으로, 고층 건물에 적합합니다.\n포지티브식: 기계적인 연결을 통해 직접 승강기를 이동시키는 방식으로, 정확한 위치 제어가 가능합니다.\n로프현수식: 로프에 승강기를 매달아 이동시키는 방식으로, 일반적인 엘리베이터에서 사용됩니다.\n스크류-너트식: 스크류와 너트를 이용하여 승강기를 이동시키는 방식으로, 정밀한 제어가 가능합니다.\n체인현수식: 체인을 이용하여 승강기를 매달아 이동시키는 방식으로, 내구성이 높습니다.\n벨트식: 벨트를 이용하여 승강기를 이동시키는 방식으로, 소음이 적고 유지보수가 용이합니다.\n체인식: 체인을 이용하여 승강기를 이동시키는 방식으로, 강한 인장력을 제공합니다.\n랙-피니언식: 기어와 랙을 이용하여 승강기를 이동시키는 방식으로, 경사면에서도 사용 가능합니다."
  },
  {
    "objectID": "posts/c_03.html#section-1",
    "href": "posts/c_03.html#section-1",
    "title": "3. 승강기 검사 결과",
    "section": "2.",
    "text": "2.\n승강기의 세부 형식은 구동 방식, 설치 환경, 용도에 따라 다양하게 분류됩니다. 아래는 주어진 목록에 대한 간단한 설명입니다:\n\n\n전기적 구동 방식\n\n\nVVVF (Variable Voltage Variable Frequency) 전압과 주파수를 가변적으로 조절하여 모터의 속도와 토크를 제어하는 방식으로, 승강기의 부드러운 가속과 감속을 가능하게 하여 승차감을 향상시키고 에너지 효율성을 높입니다. \n교류 (AC) 교류 전원을 사용하는 모터로 구동되는 방식으로, 유지보수가 간편하고 비용 효율적이며, 현대 승강기에서 널리 사용됩니다.\n직류기어 (DC Geared) 기어박스를 통해 모터의 회전력을 전달하는 방식으로, 중저속 승강기에 적합하며, 유지보수가 필요합니다.\n직류무기어 (DC Gearless) 기어 없이 모터와 드라이브 풀리를 직접 연결하는 방식으로, 고속 운행이 가능하며, 고층 건물에 적합합니다. \n\n\n\n설치 환경 및 구조에 따른 분류\n\n\n수직형 LIFT (4m 이하) 4미터 이하의 높이를 이동하는 리프트로, 주로 휠체어 사용자나 소형 화물 운반에 사용됩니다.\n수직형 LIFT (4m 초과) 4미터를 초과하는 높이를 이동하는 리프트로, 상업용 또는 산업용으로 사용되며, 안전성과 구조적 안정성이 중요합니다.\n경사형 LIFT 경사진 레일을 따라 이동하는 리프트로, 지형의 경사를 따라 설치되며, 주로 언덕이나 계단이 있는 장소에서 사용됩니다. \n\n\n이러한 세부 형식은 건물의 구조, 용도, 사용자 요구사항에 따라 선택되며, 각각의 방식은 특정한 장점과 제한사항을 가지고 있습니다."
  },
  {
    "objectID": "posts/c_02.html",
    "href": "posts/c_02.html",
    "title": "2. 국내 승강기 보유 현황",
    "section": "",
    "text": "한국승강기안전공단 국내 승강기 보유 현황\n\n한국승강기안전공단에서는 승강기 관련 종합정보전산망을 구축하여 승강기에 대한 종합정보와 사고 등의 각종 이력관리 및 승강기관련 각종 통계자료를 제공하고 있습니다.\n\nhttps://www.data.go.kr/data/15017366/fileData.do"
  },
  {
    "objectID": "posts/c_02.html#load-data",
    "href": "posts/c_02.html#load-data",
    "title": "2. 국내 승강기 보유 현황",
    "section": "Load Data",
    "text": "Load Data\n\nurl = \"https://raw.githubusercontent.com/sw1kwon/KESA/refs/heads/main/data/c_02.csv\"\ndf = pd.read_csv(url)\n\n\ndf.head()\n\n\n\n\n\n\n\n\n지역\n건물명\n건물층수\n운행층수\n승강기종류\n건물용도(대)\n정격속도(미터 퍼 세컨드)\n대수\n\n\n\n\n0\n강원 강릉시\n#초당\n4\n4.0\n승객용\n제1종근린생활시설\n1.00\n1\n\n\n1\n강원 강릉시\n(사)강릉중앙시장번영회\n2\n8.6\n경사형휠체어리프트\n제2종근린생활시설\n0.13\n1\n\n\n2\n강원 강릉시\n(주)강릉농산물도매시장\n2\n3.0\n화물용\n판매시설\n0.75\n1\n\n\n3\n강원 강릉시\n(주)강릉농산물도매시장\n3\n3.0\n화물용\n판매시설\n0.75\n1\n\n\n4\n강원 강릉시\n(주)경포아쿠아리움\n2\n2.0\n병원용\n문화및집회시설\n1.00\n1"
  },
  {
    "objectID": "posts/c_02.html#데이터-구조-확인",
    "href": "posts/c_02.html#데이터-구조-확인",
    "title": "2. 국내 승강기 보유 현황",
    "section": "데이터 구조 확인",
    "text": "데이터 구조 확인\n\ndf.shape\n\n(540622, 8)\n\n\n\n# 데이터 구조 파악\n# object 문자형\n# int/float 수치형\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 540622 entries, 0 to 540621\nData columns (total 8 columns):\n #   Column          Non-Null Count   Dtype  \n---  ------          --------------   -----  \n 0   지역              540622 non-null  object \n 1   건물명             540622 non-null  object \n 2   건물층수            540622 non-null  int64  \n 3   운행층수            540622 non-null  float64\n 4   승강기종류           540622 non-null  object \n 5   건물용도(대)         540622 non-null  object \n 6   정격속도(미터 퍼 세컨드)  540601 non-null  float64\n 7   대수              540622 non-null  int64  \ndtypes: float64(2), int64(2), object(4)\nmemory usage: 33.0+ MB\n\n\n\n정격속도(미터 퍼 세컨드)를 제외한 모든 변수에 Null 값이 없음\n\n\n# 문자형(범주형) 데이터 확인\ndf.describe(include=['object']).T\n\n\n\n\n\n\n\n\ncount\nunique\ntop\nfreq\n\n\n\n\n지역\n540622\n252\n서울 강남구\n13350\n\n\n건물명\n540622\n265772\n대성빌딩\n314\n\n\n승강기종류\n540622\n35\n승객용\n212427\n\n\n건물용도(대)\n540622\n31\n공동주택\n176317\n\n\n\n\n\n\n\n\n# 수치형 데이터 확인\ndf.describe(include=['int64','float64'])\n\n\n\n\n\n\n\n\n건물층수\n운행층수\n정격속도(미터 퍼 세컨드)\n대수\n\n\n\n\ncount\n540622.000000\n540622.000000\n540601.000000\n540622.000000\n\n\nmean\n7.763321\n8.102380\n1.133568\n1.602769\n\n\nstd\n7.153593\n7.127733\n0.473054\n2.188103\n\n\nmin\n0.000000\n0.000000\n0.003500\n1.000000\n\n\n25%\n4.000000\n4.000000\n1.000000\n1.000000\n\n\n50%\n5.000000\n5.000000\n1.000000\n1.000000\n\n\n75%\n9.000000\n10.000000\n1.500000\n1.000000\n\n\nmax\n340.000000\n128.000000\n30.000000\n142.000000\n\n\n\n\n\n\n\n\n# df.describe(include='number') # 동일 결과 코드"
  },
  {
    "objectID": "posts/c_02.html#결측치-각-column의-결측값-비율",
    "href": "posts/c_02.html#결측치-각-column의-결측값-비율",
    "title": "2. 국내 승강기 보유 현황",
    "section": "1. (결측치) 각 column의 결측값 비율",
    "text": "1. (결측치) 각 column의 결측값 비율\n\n# 각 column의 결측값 비율 계산\nmissing_ratio = df.isnull().mean()                  # 각 column의 결측값 비율 계산 (결측 개수 / 전체 row 수)\nmissing_ratio = missing_ratio.sort_values(ascending=False)  # 결측 비율이 높은 순서대로 정렬\nmissing_ratio = missing_ratio.reset_index()         # Series → DataFrame 변환 (인덱스 초기화)\nmissing_ratio.columns = ['Column', 'MissingRatio']\nprint(missing_ratio)\n\n           Column  MissingRatio\n0  정격속도(미터 퍼 세컨드)      0.000039\n1              지역      0.000000\n2            건물층수      0.000000\n3             건물명      0.000000\n4            운행층수      0.000000\n5           승강기종류      0.000000\n6         건물용도(대)      0.000000\n7              대수      0.000000\n\n\n\n정격속도(미터 퍼 세컨드)만 결측값이 존재하고 결측 비율도 낮음"
  },
  {
    "objectID": "posts/c_02.html#이상치-각-column별-이상치-확인",
    "href": "posts/c_02.html#이상치-각-column별-이상치-확인",
    "title": "2. 국내 승강기 보유 현황",
    "section": "2. (이상치) 각 column별 이상치 확인",
    "text": "2. (이상치) 각 column별 이상치 확인\n\n# 수치형 변수만 추출\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 이상치 비율 저장용 리스트\noutlier_info = []\n\n# 각 수치형 column에 대해 이상치 비율 계산 (IQR 방식)\nfor col in numeric_cols:\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n    lower = Q1 - 1.5 * IQR\n    upper = Q3 + 1.5 * IQR\n    outliers = ((df[col] &lt; lower) | (df[col] &gt; upper)).sum()\n    outlier_ratio = outliers / df.shape[0]\n    outlier_info.append((col, outliers, outlier_ratio))\n\n# 결과 DataFrame 정리\noutlier_df = pd.DataFrame(outlier_info, columns=['Column', 'OutlierCount', 'OutlierRatio'])\noutlier_df = outlier_df.sort_values(by='OutlierRatio', ascending=False)\n\nprint(outlier_df)\n\n           Column  OutlierCount  OutlierRatio\n3              대수        119623      0.221269\n0            건물층수         61067      0.112957\n1            운행층수         47398      0.087673\n2  정격속도(미터 퍼 세컨드)         15887      0.029387\n\n\n\n모든 수치형 변수에 IQR 방식의 이상치가 존재\n\n\n# 이상치 비율이 높은 상위 n개 변수만 시각화\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 이상치 비율 높은 상위 n개 변수만 선택\ntop_n = 5\ntop_outlier_cols = outlier_df.head(top_n)['Column']\n\n# 박스플롯 시각화\nplt.figure(figsize=(12, 6))\nfor i, col in enumerate(top_outlier_cols, 1):\n    plt.subplot(1, top_n, i)\n    sns.boxplot(y=df[col])\n    plt.title(col)\n    plt.tight_layout()\n\nplt.show()\n\n\n\n\n\n\n\n\n\n각 변수마다 이상치 중에서도 돋보이는 이상치들이 보임\n\n\n# # 개별 탐색 시 사용 가능한 함수 정의\n# def plot_box(col):\n#     sns.boxplot(y=df[col])\n#     plt.title(f\"Boxplot of {col}\")\n#     plt.show()\n\n# # 예시 사용: plot_box('Column Name')\n\n\n이상치가 있는 row 확인\n\ndf[df['대수'] &gt; 100]\n\n\n\n\n\n\n\n\n지역\n건물명\n건물층수\n운행층수\n승강기종류\n건물용도(대)\n정격속도(미터 퍼 세컨드)\n대수\n\n\n\n\n258740\n대전 유성구\n엑스포아파트\n17\n17.0\n승객용\n공동주택\n1.5\n110\n\n\n383409\n서울 송파구\n올림픽훼밀리타운\n15\n15.0\n승객용\n공동주택\n1.0\n142\n\n\n493174\n제주 제주시\n라온프라이빗타운\n7\n7.0\n장애인용\n공동주택\n1.0\n105\n\n\n\n\n\n\n\n\ndf[df['건물층수'] &gt; 200]\n\n\n\n\n\n\n\n\n지역\n건물명\n건물층수\n운행층수\n승강기종류\n건물용도(대)\n정격속도(미터 퍼 세컨드)\n대수\n\n\n\n\n264301\n부산 강서구\n명지2차 금강펜테리움 센트럴파크\n259\n30.0\n소방구조/장애인용\n공동주택\n1.75\n1\n\n\n264302\n부산 강서구\n명지2차 금강펜테리움 센트럴파크\n291\n30.0\n소방구조/장애인용\n공동주택\n1.75\n1\n\n\n283688\n부산 사상구\n주례반도보라매머드타운\n235\n23.0\n소방구조용\n공동주택\n1.50\n1\n\n\n452506\n인천 연수구\n랜드마크시티센트럴더샵업무시설\n340\n43.0\n피난/장애용\n공동주택\n3.00\n1\n\n\n\n\n\n\n\n\n이 경우 승강기 종류가 승객용이 아님\n\n\ndf[df['운행층수'].isin(df['운행층수'].nlargest(7))].sort_values(by='운행층수', ascending=False)\n\n\n\n\n\n\n\n\n지역\n건물명\n건물층수\n운행층수\n승강기종류\n건물용도(대)\n정격속도(미터 퍼 세컨드)\n대수\n\n\n\n\n380493\n서울 송파구\n롯데월드타워 물산\n123\n128.0\n소방구조용\n업무시설\n8.0\n1\n\n\n380492\n서울 송파구\n롯데월드타워 물산\n123\n128.0\n소방구조용\n업무시설\n6.0\n1\n\n\n294853\n부산 해운대구\nLCT( 포디움,전망대 )\n101\n106.0\n소방구조용\n제1종근린생활시설\n4.0\n1\n\n\n380491\n서울 송파구\n롯데월드타워 물산\n123\n106.0\n피난용\n업무시설\n8.0\n1\n\n\n294883\n부산 해운대구\nLCT(더 레지던스)\n101\n106.0\n소방구조용\n제1종근린생활시설\n4.0\n1\n\n\n294896\n부산 해운대구\nLCT(주거동)\n85\n90.0\n소방구조용\n제1종근린생활시설\n4.0\n2\n\n\n297711\n부산 해운대구\n해운대두산위브더제니스\n82\n87.0\n소방구조/장애인용\n공동주택\n3.5\n1\n\n\n\n\n\n\n\n\n이 경우도 승강기 종류가 승객용이 아님\n\n\ndf[df['정격속도(미터 퍼 세컨드)'] &gt; 15]\n\n\n\n\n\n\n\n\n지역\n건물명\n건물층수\n운행층수\n승강기종류\n건물용도(대)\n정격속도(미터 퍼 세컨드)\n대수\n\n\n\n\n5028\n강원 속초시\n카시아속초생활형숙박시설\n5\n2.0\n에스컬레이터\n숙박시설\n30.0\n2\n\n\n6937\n강원 원주시\n드림시티\n6\n0.0\n에스컬레이터\n교육연구시설\n30.0\n2\n\n\n\n\n\n\n\n\n조건을 만족하는 row가 2개였음\n승강기 종류는 모두 에스컬레이터"
  },
  {
    "objectID": "posts/c_02.html#unique-각-column의-unique값과-unique값별-빈도",
    "href": "posts/c_02.html#unique-각-column의-unique값과-unique값별-빈도",
    "title": "2. 국내 승강기 보유 현황",
    "section": "3. (unique) 각 column의 unique값과 unique값별 빈도",
    "text": "3. (unique) 각 column의 unique값과 unique값별 빈도\n\n# # 전체 column 대상 (비율을 %로, 순서 유지)\n\n# for col in df.columns:\n#     print(f\"=== {col} ===\")\n#     print(\"Unique count:\", df[col].nunique())\n\n#     # 빈도와 비율 계산 (NaN 포함, 고유값 순서 유지)\n#     value_counts = df[col].value_counts(dropna=False, sort=False)\n#     value_ratio = df[col].value_counts(normalize=True, dropna=False, sort=False) * 100  # 비율을 %\n\n#     # 결합\n#     summary_df = pd.DataFrame({\n#         'Count': value_counts,\n#         'Ratio (%)': value_ratio.round(2)\n#     })\n\n#     print(summary_df)\n#     print(\"\\n\")\n\n\n# 범주형 변수만 대상\ncat_cols = df.select_dtypes(include=['object']).columns\n\nfor col in cat_cols:\n    print(f\"=== {col} ===\")\n    print(\"Unique count:\", df[col].nunique())\n\n    value_counts = df[col].value_counts(dropna=False, sort=False)\n    value_ratio = df[col].value_counts(normalize=True, dropna=False, sort=False) * 100\n\n    summary_df = pd.DataFrame({\n        'Count': value_counts,\n        'Ratio (%)': value_ratio.round(2)\n    })\n\n    print(summary_df)\n    print(\"\\n\")\n\n=== 지역 ===\nUnique count: 252\n            Count  Ratio (%)\n지역                          \n강원 강릉시       2378       0.44\n강원 고성군        296       0.05\n강원 동해시        788       0.15\n강원 삼척시        651       0.12\n강원 속초시       1050       0.19\n...           ...        ...\n충북 청주시 상당구   1917       0.35\n충북 청주시 서원구   1705       0.32\n충북 청주시 청원구   2198       0.41\n충북 청주시 흥덕구   3869       0.72\n충북 충주시       2333       0.43\n\n[252 rows x 2 columns]\n\n\n=== 건물명 ===\nUnique count: 265772\n              Count  Ratio (%)\n건물명                           \n#초당               1        0.0\n(사)강릉중앙시장번영회      1        0.0\n(주)강릉농산물도매시장      2        0.0\n(주)경포아쿠아리움        2        0.0\n(주)대성환경건설         1        0.0\n...             ...        ...\n홀인원리조트            1        0.0\n화정빌딩A             1        0.0\n환이빌딩              1        0.0\n환호빌리지             1        0.0\n휴먼시아7단지아파트        3        0.0\n\n[265772 rows x 2 columns]\n\n\n=== 승강기종류 ===\nUnique count: 35\n               Count  Ratio (%)\n승강기종류                          \n승객용           212427      39.29\n경사형휠체어리프트       1188       0.22\n화물용            19080       3.53\n병원용             5786       1.07\n화물용(DW)         2197       0.41\n전망용             5060       0.94\n덤웨이터            6382       1.18\n장애인용          159760      29.55\n자동차용           10725       1.98\n무빙워크            1848       0.34\n장애/승객화물용        6941       1.28\n소방구조/장애인용      49531       9.16\n승객화물용           6448       1.19\n장애/병원용          5727       1.06\n장애/전망용          9726       1.80\n수직형휠체어리프트       3232       0.60\n소방구조/장애/승객화물    6696       1.24\n화물/자동차용          291       0.05\n소방구조용          13201       2.44\n에스컬레이터         11290       2.09\n소방구조/병원용         176       0.03\n소방구조/승객화물용      1060       0.20\n주택엘리베이터          847       0.16\n피난용               81       0.01\n전망/병원용            95       0.02\n소방구조/장애/병원용       97       0.02\n장애/승객화물/전망용        4       0.00\n장애/전망/병원용        117       0.02\n승객용(장애인겸용)        10       0.00\n피난/장애용           544       0.10\n피난/장애/승객화물용       34       0.01\n소방구조/장애/전망용       16       0.00\n피난/장애/병원용          1       0.00\n피난/승객화물용           3       0.00\n소방구조/전망용           1       0.00\n\n\n=== 건물용도(대) ===\nUnique count: 31\n             Count  Ratio (%)\n건물용도(대)                      \n제1종근린생활시설    42973       7.95\n제2종근린생활시설    81014      14.99\n판매시설         13058       2.42\n문화및집회시설       8140       1.51\n공장           28510       5.27\n업무시설         38310       7.09\n숙박시설         18663       3.45\n교육연구시설       34383       6.36\n단독주택         49829       9.22\n창고시설          3581       0.66\n방송통신시설         459       0.08\n공동주택        176317      32.61\n노유자시설         7509       1.39\n의료시설         11073       2.05\n종교시설          8182       1.51\n관광휴게시설         654       0.12\n운동시설          3324       0.61\n자원순환관련시설       481       0.09\n수련시설           538       0.10\n운수시설          6860       1.27\n교정및군사시설        704       0.13\n발전시설           571       0.11\n자동차관련시설       3782       0.70\n위험물저장및처리시설     200       0.04\n묘지관련시설         330       0.06\n위락시설           409       0.08\n동식물관련시설        147       0.03\n야영장시설            7       0.00\n기타             288       0.05\n장례시설           208       0.04\n가설건축물          118       0.02\n\n\n\n\n\n승강기의 종류는 승객용과 장애인용이 대부분\n\n\n비율이 높은 지역 확인\n\ndef summarize_category(df, column, top_n=None, include_na=True):\n    \"\"\"\n    범주형 변수 요약 (건수 + 비율)\n    \n    Parameters:\n    - df: DataFrame\n    - column: 분석할 열 이름 (문자열)\n    - top_n: 상위 n개만 출력 (None이면 전체)\n    - include_na: NaN 포함 여부\n    \n    Returns:\n    - summary DataFrame\n    \"\"\"\n    counts = df[column].value_counts(dropna=include_na)\n    ratios = df[column].value_counts(normalize=True, dropna=include_na).mul(100).round(2)\n\n    summary = pd.DataFrame({\n        '건수': counts,\n        '비율(%)': ratios\n    }).reset_index().rename(columns={'index': column})\n\n    if top_n is not None:\n        summary = summary.head(top_n)\n\n    return summary\n\n\nsummarize_category(df, '지역', top_n=10) # 지역의 NaN은 없음\n\n\n\n\n\n\n\n\n지역\n건수\n비율(%)\n\n\n\n\n0\n서울 강남구\n13350\n2.47\n\n\n1\n경기 화성시\n11069\n2.05\n\n\n2\n경기 평택시\n9805\n1.81\n\n\n3\n서울 서초구\n8127\n1.50\n\n\n4\n제주 제주시\n7314\n1.35\n\n\n5\n서울 송파구\n7002\n1.30\n\n\n6\n서울 강서구\n6482\n1.20\n\n\n7\n경기 남양주시\n6324\n1.17\n\n\n8\n인천 서구\n5811\n1.07\n\n\n9\n대전 유성구\n5700\n1.05\n\n\n\n\n\n\n\n\n추후 활용 가능성.."
  },
  {
    "objectID": "posts/c_02.html#기술통계-각-column의-기술통계-평균값-최대값-최솟값-최빈값-분위수-등",
    "href": "posts/c_02.html#기술통계-각-column의-기술통계-평균값-최대값-최솟값-최빈값-분위수-등",
    "title": "2. 국내 승강기 보유 현황",
    "section": "4. (기술통계) 각 column의 기술통계 (평균값, 최대값, 최솟값, 최빈값, 분위수 등)",
    "text": "4. (기술통계) 각 column의 기술통계 (평균값, 최대값, 최솟값, 최빈값, 분위수 등)\n\n# 수치형 변수만 선택\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 통계 요약 저장용 리스트\nstat_list = []\n\nfor col in numeric_cols:\n    desc = df[col].describe()\n    mode = df[col].mode(dropna=False).values[0]  # 최빈값 (여러 개 중 첫 번째 선택)\n    mode_all = df[col].mode(dropna=False).tolist()  # 최빈값 리스트 형태로 저장\n\n    stat_list.append({\n        'Feature': col,\n        'Count': desc['count'],\n        'Mean': desc['mean'],\n        'Std': desc['std'],\n        'Min': desc['min'],\n        '25%': desc['25%'],\n        'Median (50%)': desc['50%'],\n        '75%': desc['75%'],\n        'Max': desc['max'],\n        'Mode': mode,\n        'Mode_all': mode_all\n    })\n\n# DataFrame으로 정리\nstats_df = pd.DataFrame(stat_list)\nstats_df\n\n\n\n\n\n\n\n\nFeature\nCount\nMean\nStd\nMin\n25%\nMedian (50%)\n75%\nMax\nMode\nMode_all\n\n\n\n\n0\n건물층수\n540622.0\n7.763321\n7.153593\n0.0000\n4.0\n5.0\n9.0\n340.0\n4.0\n[4]\n\n\n1\n운행층수\n540622.0\n8.102380\n7.127733\n0.0000\n4.0\n5.0\n10.0\n128.0\n4.0\n[4.0]\n\n\n2\n정격속도(미터 퍼 세컨드)\n540601.0\n1.133568\n0.473054\n0.0035\n1.0\n1.0\n1.5\n30.0\n1.0\n[1.0]\n\n\n3\n대수\n540622.0\n1.602769\n2.188103\n1.0000\n1.0\n1.0\n1.0\n142.0\n1.0\n[1]"
  },
  {
    "objectID": "posts/c_02.html#상관관계-상관관계-매트릭스",
    "href": "posts/c_02.html#상관관계-상관관계-매트릭스",
    "title": "2. 국내 승강기 보유 현황",
    "section": "5. (상관관계) 상관관계 매트릭스",
    "text": "5. (상관관계) 상관관계 매트릭스\n\n# 수치형 변수 간 상관관계 매트릭스\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 수치형 변수만 선택\nnumeric_df = df.select_dtypes(include=['float64', 'int64'])\n\n# 상관계수 계산\ncorr_matrix = numeric_df.corr()\n\n# 시각화\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", square=True)\nplt.title(\"Numeric Feature Correlation Matrix\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n전부 양의 상관관계를 보임\n대수는 다른 변수들과 상관관계가 약한 편"
  },
  {
    "objectID": "posts/c_02.html#시각화-histogram-bar-graph-box-plot-등",
    "href": "posts/c_02.html#시각화-histogram-bar-graph-box-plot-등",
    "title": "2. 국내 승강기 보유 현황",
    "section": "6. (시각화) histogram, bar graph, box plot 등",
    "text": "6. (시각화) histogram, bar graph, box plot 등\n\nimport matplotlib.pyplot as plt\n\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 전체 수치형 변수에 대해 히스토그램 그리기\nfor col in numeric_cols:\n    plt.figure(figsize=(6, 4))\n    plt.hist(df[col].dropna(), bins=30, edgecolor='black')\n    plt.title(f'Histogram of {col}')\n    plt.xlabel(col)\n    plt.ylabel('Frequency')\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbins를 증가시키면\n\n\nimport matplotlib.pyplot as plt\n\nnumeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# 전체 수치형 변수에 대해 히스토그램 그리기\nfor col in numeric_cols:\n    plt.figure(figsize=(6, 4))\n    plt.hist(df[col].dropna(), bins=60, edgecolor='black')\n    plt.title(f'Histogram of {col}')\n    plt.xlabel(col)\n    plt.ylabel('Frequency')\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\n# cat_cols = df.select_dtypes(include=['object']).columns\n\n# # 전체 범주형 변수에 대해 히스토그램 그리기\n\n# for col in cat_cols:\n#     plt.figure(figsize=(6, 4))\n#     ax = sns.countplot(data=df, x=col, order=df[col].value_counts().index, color='salmon')\n\n#     total = len(df)\n\n#     for p in ax.patches:\n#         count = int(p.get_height())\n#         percent = 100 * count / total\n#         label = f'{count} ({percent:.1f}%)'\n\n#         # 텍스트 위치: 막대 안쪽 상단 (중앙 정렬)\n#         ax.annotate(label,\n#                     (p.get_x() + p.get_width() / 2., p.get_height() * 0.95),\n#                     ha='center', va='top',\n#                     fontsize=9, color='white', weight='bold')\n\n#     plt.title(f'Bar Graph of {col} (Count + Ratio)')\n#     plt.xticks(rotation=45)\n#     plt.tight_layout()\n#     plt.show()\n\n\n의미가 없어서 실행 X (시간도 오래 걸림)\n\n\n# # 특정 변수에 따른 수치형 변수 분포 비교\n# for col in numeric_cols:\n#     plt.figure(figsize=(6, 4))\n#     sns.boxplot(data=df, x='###Column Name###', y=col)\n#     plt.title(f'Boxplot of {col} by ###Column Name###')\n#     plt.tight_layout()\n#     plt.show()\n\n\n의미가 없어서 실행 X\n\n\n# 특정 변수 중 특정 값들에 따른 수치형 변수들 분포 비교\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 파라미터 설정\ngroup_col = '지역'  # 비교할 범주형 변수\ntarget_values = ['서울 강남구', '경기 화성시', '경기 평택시', '서울 서초구', '제주 제주시']  # 특정 값들\nnumeric_cols = ['건물층수', '운행층수', '정격속도(미터 퍼 세컨드)', '대수']  # 수치형 변수 목록\n\n# 필터링된 데이터프레임\nfiltered_df = df[df[group_col].isin(target_values)]\n\n# 반복해서 boxplot 그리기\nfor col in numeric_cols:\n    plt.figure(figsize=(6, 4))\n    sns.boxplot(data=filtered_df, x=group_col, y=col)\n    plt.title(f'Boxplot of {col} by {group_col} ({\", \".join(target_values)})')\n    plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "posts/c_02.html#교차표-범주형-변수-간의-관계",
    "href": "posts/c_02.html#교차표-범주형-변수-간의-관계",
    "title": "2. 국내 승강기 보유 현황",
    "section": "7. (교차표) 범주형 변수 간의 관계",
    "text": "7. (교차표) 범주형 변수 간의 관계\n\n# '지역'에 따른 '승강기종류' 비율\nprint(\"=== 지역 vs 승강기종류 ===\")\nratio = df.groupby('지역')['승강기종류'].value_counts(normalize=True).unstack()\nratio.head()\n\n=== 지역 vs 승강기종류 ===\n\n\n\n\n\n\n\n\n승강기종류\n경사형휠체어리프트\n덤웨이터\n무빙워크\n병원용\n소방구조/병원용\n소방구조/승객화물용\n소방구조/장애/병원용\n소방구조/장애/승객화물\n소방구조/장애/전망용\n소방구조/장애인용\n...\n전망용\n주택엘리베이터\n피난/승객화물용\n피난/장애/병원용\n피난/장애/승객화물용\n피난/장애용\n피난용\n화물/자동차용\n화물용\n화물용(DW)\n\n\n지역\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n강원 강릉시\n0.003364\n0.010513\n0.004205\n0.013877\n0.000421\n0.000421\nNaN\n0.002103\nNaN\n0.065601\n...\n0.014718\n0.013457\nNaN\nNaN\nNaN\nNaN\nNaN\n0.000421\n0.029016\n0.003364\n\n\n강원 고성군\n0.003378\n0.020270\n0.003378\n0.010135\nNaN\nNaN\nNaN\n0.010135\nNaN\n0.064189\n...\n0.050676\n0.003378\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.030405\nNaN\n\n\n강원 동해시\n0.001269\n0.013959\n0.006345\n0.020305\nNaN\nNaN\nNaN\n0.002538\nNaN\n0.144670\n...\n0.019036\nNaN\nNaN\nNaN\nNaN\nNaN\n0.001269\nNaN\n0.032995\n0.002538\n\n\n강원 삼척시\n0.006144\n0.019969\n0.006144\n0.006144\nNaN\nNaN\nNaN\nNaN\nNaN\n0.099846\n...\n0.021505\n0.001536\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.015361\nNaN\n\n\n강원 속초시\nNaN\n0.012381\n0.004762\n0.012381\nNaN\n0.001905\nNaN\nNaN\nNaN\n0.110476\n...\n0.030476\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.011429\n0.000952\n\n\n\n\n5 rows × 35 columns\n\n\n\n\n# pd.crosstab(df['지역'], df['승강기종류'], normalize='index')\n\n\n함수 1\n\ndef grouped_ratio_table(df, group_col, target_col, normalize=True):\n    \"\"\"\n    group_col 기준으로 target_col의 비율(또는 건수)을 cross-tab 형태로 반환\n\n    Parameters:\n    - df: DataFrame\n    - group_col: 그룹 기준 변수 (ex: '지역')\n    - target_col: 비율을 계산할 대상 변수 (ex: '승강기종류')\n    - normalize: True면 비율, False면 건수\n\n    Returns:\n    - DataFrame: 행 = group_col, 열 = target_col\n    \"\"\"\n    grouped = (\n        df.groupby(group_col)[target_col]\n        .value_counts(normalize=normalize)\n        .unstack()\n    )\n    return grouped\n\n\n# 비율 사용 예시\nprint(\"=== 지역 vs 승강기종류 비율 ===\")\ngrouped_ratio_table(df, '지역', '승강기종류').head()\n\n=== 지역 vs 승강기종류 비율 ===\n\n\n\n\n\n\n\n\n승강기종류\n경사형휠체어리프트\n덤웨이터\n무빙워크\n병원용\n소방구조/병원용\n소방구조/승객화물용\n소방구조/장애/병원용\n소방구조/장애/승객화물\n소방구조/장애/전망용\n소방구조/장애인용\n...\n전망용\n주택엘리베이터\n피난/승객화물용\n피난/장애/병원용\n피난/장애/승객화물용\n피난/장애용\n피난용\n화물/자동차용\n화물용\n화물용(DW)\n\n\n지역\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n강원 강릉시\n0.003364\n0.010513\n0.004205\n0.013877\n0.000421\n0.000421\nNaN\n0.002103\nNaN\n0.065601\n...\n0.014718\n0.013457\nNaN\nNaN\nNaN\nNaN\nNaN\n0.000421\n0.029016\n0.003364\n\n\n강원 고성군\n0.003378\n0.020270\n0.003378\n0.010135\nNaN\nNaN\nNaN\n0.010135\nNaN\n0.064189\n...\n0.050676\n0.003378\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.030405\nNaN\n\n\n강원 동해시\n0.001269\n0.013959\n0.006345\n0.020305\nNaN\nNaN\nNaN\n0.002538\nNaN\n0.144670\n...\n0.019036\nNaN\nNaN\nNaN\nNaN\nNaN\n0.001269\nNaN\n0.032995\n0.002538\n\n\n강원 삼척시\n0.006144\n0.019969\n0.006144\n0.006144\nNaN\nNaN\nNaN\nNaN\nNaN\n0.099846\n...\n0.021505\n0.001536\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.015361\nNaN\n\n\n강원 속초시\nNaN\n0.012381\n0.004762\n0.012381\nNaN\n0.001905\nNaN\nNaN\nNaN\n0.110476\n...\n0.030476\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.011429\n0.000952\n\n\n\n\n5 rows × 35 columns\n\n\n\n\n# 건수 사용 예시\nprint(\"=== 지역 vs 승강기종류 건수 ===\")\ngrouped_ratio_table(df, '지역', '승강기종류', normalize=False).head()\n\n=== 지역 vs 승강기종류 건수 ===\n\n\n\n\n\n\n\n\n승강기종류\n경사형휠체어리프트\n덤웨이터\n무빙워크\n병원용\n소방구조/병원용\n소방구조/승객화물용\n소방구조/장애/병원용\n소방구조/장애/승객화물\n소방구조/장애/전망용\n소방구조/장애인용\n...\n전망용\n주택엘리베이터\n피난/승객화물용\n피난/장애/병원용\n피난/장애/승객화물용\n피난/장애용\n피난용\n화물/자동차용\n화물용\n화물용(DW)\n\n\n지역\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n강원 강릉시\n8.0\n25.0\n10.0\n33.0\n1.0\n1.0\nNaN\n5.0\nNaN\n156.0\n...\n35.0\n32.0\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\n69.0\n8.0\n\n\n강원 고성군\n1.0\n6.0\n1.0\n3.0\nNaN\nNaN\nNaN\n3.0\nNaN\n19.0\n...\n15.0\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n9.0\nNaN\n\n\n강원 동해시\n1.0\n11.0\n5.0\n16.0\nNaN\nNaN\nNaN\n2.0\nNaN\n114.0\n...\n15.0\nNaN\nNaN\nNaN\nNaN\nNaN\n1.0\nNaN\n26.0\n2.0\n\n\n강원 삼척시\n4.0\n13.0\n4.0\n4.0\nNaN\nNaN\nNaN\nNaN\nNaN\n65.0\n...\n14.0\n1.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n10.0\nNaN\n\n\n강원 속초시\nNaN\n13.0\n5.0\n13.0\nNaN\n2.0\nNaN\nNaN\nNaN\n116.0\n...\n32.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n1.0\n\n\n\n\n5 rows × 35 columns\n\n\n\n\n\n함수 2\n\ndef filter_crosstab(df, group_col, target_col,\n                    row_values=None, col_values=None,\n                    normalize=True):\n    \"\"\"\n    전체 교차표 생성 후, 특정 행(row)/열(column)만 필터링\n    \n    Parameters:\n    - df: 전체 DataFrame\n    - group_col: 행 기준 (예: '지역')\n    - target_col: 열 기준 (예: '승강기종류')\n    - row_values: group_col 중 보고 싶은 값 리스트\n    - col_values: target_col 중 보고 싶은 값 리스트\n    - normalize: True면 비율, False면 건수\n    \n    Returns:\n    - 필터된 교차표 DataFrame\n    \"\"\"\n    table = df.groupby(group_col)[target_col].value_counts(normalize=normalize).unstack()\n\n    if row_values is not None:\n        table = table.loc[table.index.intersection(row_values)]\n    if col_values is not None:\n        table = table.loc[:, table.columns.intersection(col_values)]\n        \n    return table\n\n\n# 비율 사용 예시\nfilter_crosstab(df,\n                group_col='지역',\n                target_col='승강기종류',\n                row_values=['서울 강남구', '경기 화성시', '경기 평택시', '서울 서초구', '제주 제주시'],\n                col_values=['승객용', '장애인용'],\n                normalize=True)\n\n\n\n\n\n\n\n승강기종류\n승객용\n장애인용\n\n\n지역\n\n\n\n\n\n\n경기 평택시\n0.489138\n0.265783\n\n\n경기 화성시\n0.322071\n0.282320\n\n\n서울 강남구\n0.467715\n0.255955\n\n\n서울 서초구\n0.457364\n0.260859\n\n\n제주 제주시\n0.427400\n0.421247\n\n\n\n\n\n\n\n\n# 건수 사용 예시\nfilter_crosstab(df,\n                group_col='지역',\n                target_col='승강기종류',\n                row_values=['서울 강남구', '경기 화성시', '경기 평택시', '서울 서초구', '제주 제주시'],\n                col_values=['승객용', '장애인용'],\n                normalize=False)\n\n\n\n\n\n\n\n승강기종류\n승객용\n장애인용\n\n\n지역\n\n\n\n\n\n\n경기 평택시\n4796.0\n2606.0\n\n\n경기 화성시\n3565.0\n3125.0\n\n\n서울 강남구\n6244.0\n3417.0\n\n\n서울 서초구\n3717.0\n2120.0\n\n\n제주 제주시\n3126.0\n3081.0\n\n\n\n\n\n\n\n\n\n함수 3\n\ndef merged_ratio_count_table(df, group_col, target_col,\n                              row_values=None, col_values=None,\n                              sort_mode='suffix-first',\n                              order=['비율', '건수']):\n    \"\"\"\n    비율 교차표와 건수 교차표를 병합하고 선택한 행/열만 필터링, 열 순서 정렬까지 하나의 함수로 처리\n\n    Parameters:\n    - df: DataFrame\n    - group_col: 행 기준 변수 (예: '지역')\n    - target_col: 열 기준 변수 (예: '승강기종류')\n    - row_values: 선택할 행 인덱스 (None이면 전체)\n    - col_values: 선택할 열 값 (None이면 전체)\n    - sort_mode: 열 정렬 방식 - 'suffix-first' 또는 'prefix-first'\n        - 'suffix-first': 항목별로 비율 → 건수 순서로 정렬  \n          예: ['승객용_비율', '승객용_건수', '화물용_비율', '화물용_건수']\n        - 'prefix-first': 비율 열들을 모두 먼저, 그다음 건수 열들을 정렬  \n          예: ['승객용_비율', '화물용_비율', '승객용_건수', '화물용_건수']\n    - order: 접미사 순서 지정 (허용된 값만 가능: ['비율', '건수'] 또는 ['건수', '비율'])\n\n    Returns:\n    - 병합된 정렬된 교차표 DataFrame\n    \"\"\"\n\n    from collections import defaultdict\n\n    # === Step 0. order 유효성 검사 ===\n    if set(order) != {'비율', '건수'} or len(order) != 2:\n        raise ValueError(\"order must be exactly ['비율', '건수'] or ['건수', '비율']\")\n\n    # === Step 1. 전체 교차표 생성 (비율, 건수) ===\n    ratio = df.groupby(group_col)[target_col].value_counts(normalize=True).unstack()\n    count = df.groupby(group_col)[target_col].value_counts(normalize=False).unstack()\n\n    # === Step 2. 열 필터링 ===\n    if col_values is not None:\n        ratio = ratio.loc[:, ratio.columns.intersection(col_values)]\n        count = count.loc[:, count.columns.intersection(col_values)]\n\n    # === Step 3. 열 이름 변경 ===\n    ratio.columns = [f\"{col}_비율\" for col in ratio.columns]\n    count.columns = [f\"{col}_건수\" for col in count.columns]\n\n    # === Step 4. 병합 ===\n    merged = pd.concat([ratio, count], axis=1)\n\n    # === Step 5. 열 순서 재정렬 ===\n    prefix_groups = defaultdict(dict)\n    for col in merged.columns:\n        if '_' in col:\n            prefix, suffix = col.rsplit('_', 1)\n            prefix_groups[prefix][suffix] = col\n\n    ordered_cols = []\n    if sort_mode == 'suffix-first':\n        for prefix in sorted(prefix_groups):\n            for suffix in order:\n                if suffix in prefix_groups[prefix]:\n                    ordered_cols.append(prefix_groups[prefix][suffix])\n    elif sort_mode == 'prefix-first':\n        for suffix in order:\n            for prefix in sorted(prefix_groups):\n                if suffix in prefix_groups[prefix]:\n                    ordered_cols.append(prefix_groups[prefix][suffix])\n    else:\n        raise ValueError(\"sort_mode must be 'suffix-first' or 'prefix-first'\")\n\n    merged = merged[ordered_cols]\n\n    # === Step 6. 행 필터링 ===\n    if row_values is not None:\n        merged = merged.loc[merged.index.intersection(row_values)]\n\n    return merged\n\n\n# 사용 예시\nmerged_ratio_count_table(\n    df,\n    group_col='지역',\n    target_col='승강기종류',\n    row_values=['서울 강남구', '경기 화성시', '경기 평택시', '서울 서초구', '제주 제주시'],\n    col_values=['승객용', '장애인용'],\n    sort_mode='suffix-first',\n    order=['비율', '건수']\n)\n\n\n\n\n\n\n\n\n승객용_비율\n승객용_건수\n장애인용_비율\n장애인용_건수\n\n\n지역\n\n\n\n\n\n\n\n\n경기 평택시\n0.489138\n4796.0\n0.265783\n2606.0\n\n\n경기 화성시\n0.322071\n3565.0\n0.282320\n3125.0\n\n\n서울 강남구\n0.467715\n6244.0\n0.255955\n3417.0\n\n\n서울 서초구\n0.457364\n3717.0\n0.260859\n2120.0\n\n\n제주 제주시\n0.427400\n3126.0\n0.421247\n3081.0\n\n\n\n\n\n\n\n\n# 사용 예시\nmerged_ratio_count_table(\n    df,\n    group_col='지역',\n    target_col='승강기종류',\n    row_values=['서울 강남구', '경기 화성시', '경기 평택시', '서울 서초구', '제주 제주시'],\n    col_values=['승객용', '장애인용'],\n    sort_mode='suffix-first',\n    order=['건수', '비율']\n)\n\n\n\n\n\n\n\n\n승객용_건수\n승객용_비율\n장애인용_건수\n장애인용_비율\n\n\n지역\n\n\n\n\n\n\n\n\n경기 평택시\n4796.0\n0.489138\n2606.0\n0.265783\n\n\n경기 화성시\n3565.0\n0.322071\n3125.0\n0.282320\n\n\n서울 강남구\n6244.0\n0.467715\n3417.0\n0.255955\n\n\n서울 서초구\n3717.0\n0.457364\n2120.0\n0.260859\n\n\n제주 제주시\n3126.0\n0.427400\n3081.0\n0.421247\n\n\n\n\n\n\n\n\n# 사용 예시\nmerged_ratio_count_table(\n    df,\n    group_col='지역',\n    target_col='승강기종류',\n    row_values=['서울 강남구', '경기 화성시', '경기 평택시', '서울 서초구', '제주 제주시'],\n    col_values=['승객용', '장애인용'],\n    sort_mode='prefix-first',\n    order=['비율', '건수']\n)\n\n\n\n\n\n\n\n\n승객용_비율\n장애인용_비율\n승객용_건수\n장애인용_건수\n\n\n지역\n\n\n\n\n\n\n\n\n경기 평택시\n0.489138\n0.265783\n4796.0\n2606.0\n\n\n경기 화성시\n0.322071\n0.282320\n3565.0\n3125.0\n\n\n서울 강남구\n0.467715\n0.255955\n6244.0\n3417.0\n\n\n서울 서초구\n0.457364\n0.260859\n3717.0\n2120.0\n\n\n제주 제주시\n0.427400\n0.421247\n3126.0\n3081.0\n\n\n\n\n\n\n\n\n\n기타 함수 (추후 사용…?)\n\ndef filter_by_multiple_conditions(df, conditions_dict):\n    \"\"\"\n    특정 범주형 변수들에서 선택한 값들만 필터링하는 함수\n    \n    Parameters:\n    - df: DataFrame\n    - conditions_dict: {'변수명': [값1, 값2, ...], ...}\n    \n    Returns:\n    - 필터링된 DataFrame\n    \"\"\"\n    condition = pd.Series([True] * len(df))\n    for col, values in conditions_dict.items():\n        condition &= df[col].isin(values)\n    return df[condition]\n\n\n# 사용 예시\nfilter_by_multiple_conditions(df, {\n    '지역': ['서울 강남구', '경기 화성시', '경기 평택시', '서울 서초구', '제주 제주시'],\n    '승강기종류': ['승객용', '장애인용']\n})\n\n\n\n\n\n\n\n\n지역\n건물명\n건물층수\n운행층수\n승강기종류\n건물용도(대)\n정격속도(미터 퍼 세컨드)\n대수\n\n\n\n\n135802\n경기 평택시\nK모텔\n5\n5.0\n승객용\n숙박시설\n1.0\n1\n\n\n135803\n경기 평택시\n(ONE)김상열/고덕동2627-2(이은숙)_R01\n3\n3.0\n승객용\n단독주택\n1.0\n1\n\n\n135804\n경기 평택시\n(메트로카운티)노블시티\n6\n6.0\n승객용\n업무시설\n1.0\n1\n\n\n135805\n경기 평택시\n(메트로카운티)노블시티\n6\n7.0\n승객용\n업무시설\n1.0\n2\n\n\n135806\n경기 평택시\n(사)함께하는세상\n3\n3.0\n장애인용\n공장\n1.0\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n498695\n제주 제주시\n힐링하우스\n5\n5.0\n승객용\n공동주택\n1.0\n1\n\n\n498696\n제주 제주시\n힐스위트\n4\n4.0\n장애인용\n제2종근린생활시설\n1.0\n1\n\n\n498697\n제주 제주시\n힐스테이\n4\n5.0\n승객용\n공동주택\n1.0\n1\n\n\n498698\n제주 제주시\n힐이진\n5\n5.0\n장애인용\n제1종근린생활시설\n1.0\n1\n\n\n498699\n제주 제주시\n힐탑아파트\n5\n5.0\n승객용\n공동주택\n1.0\n1\n\n\n\n\n35797 rows × 8 columns"
  },
  {
    "objectID": "posts/c_02.html#결측치-처리",
    "href": "posts/c_02.html#결측치-처리",
    "title": "2. 국내 승강기 보유 현황",
    "section": "1. 결측치 처리",
    "text": "1. 결측치 처리\n\n필요시 할 예정"
  },
  {
    "objectID": "posts/c_02.html#이상치-처리",
    "href": "posts/c_02.html#이상치-처리",
    "title": "2. 국내 승강기 보유 현황",
    "section": "2. 이상치 처리",
    "text": "2. 이상치 처리\n\n필요시 할 예정"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "KESA",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMay 24, 2025\n\n\n1. 승강기안전 인증 현황\n\n\nsw1kwon \n\n\n\n\nMay 24, 2025\n\n\n2. 국내 승강기 보유 현황\n\n\nsw1kwon \n\n\n\n\nMay 24, 2025\n\n\n3. 승강기 검사 결과\n\n\nsw1kwon \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/c_01.html",
    "href": "posts/c_01.html",
    "title": "1. 승강기안전 인증 현황",
    "section": "",
    "text": "한국승강기안전공단_승강기안전 인증 현황\n\n이 데이터는 한국승강기안전공단에서 제공한 승강기 안전 인증 현황을 정리한 자료로, 총 2,141건의 인증 이력을 포함하고 있습니다. 주요 컬럼으로는 안전인증번호, 인증업체코드, 업체명, 주소, 인증서 발행일, 모델명, 적용 안전 기준, 인증 상태, 인증 품목명, 인증 구분, 제조국가 등이 있습니다. 이 데이터는 엘리베이터 및 에스컬레이터와 같은 승강기 설비가 국내 안전 기준을 충족했는지 확인할 수 있는 중요한 정보로, 제조 국가부터 모델 구분, 인증 상태까지 다양한 정보를 통해 안전성과 품질을 검토할 수 있습니다. 특히 제조국가는 주로 한국과 중국으로 나뉘며, 인증 상태로는 '반납' 등의 이력이 있어, 시간에 따라 상태가 변경될 수 있음을 보여줍니다.\n\nhttps://www.data.go.kr/data/15039131/fileData.do"
  },
  {
    "objectID": "posts/c_01.html#load-data",
    "href": "posts/c_01.html#load-data",
    "title": "1. 승강기안전 인증 현황",
    "section": "Load Data",
    "text": "Load Data\n\nurl = \"https://raw.githubusercontent.com/sw1kwon/KESA/refs/heads/main/data/c_01.csv\"\ndf = pd.read_csv(url)\n\n\ndf.head()\n\n\n\n\n\n\n\n\n안전인증번호\n인증업체코드\n업체명\n인증업체주소\n접수번호\n인증서발행일\n적용안전기준\n인증서상태\n모델명\n파생모델명\n인증품목명\n인증구분\n제조국가\n\n\n\n\n0\nABB73-R001-19001\n919971182\n삼정엘리베이터\n서울특별시 양천구 목동서로 301-5\nC400120190503001\n2019-06-05\n(종전)「승강기 안전검사기준」별표 3\n반납\nK300A\nNaN\n에스컬레이터 &gt; 에스컬레이터 &gt; 일반형\n모델\n중국\n\n\n1\nABB73-R001-19002\n919971182\n삼정엘리베이터\n서울특별시 양천구 목동서로 301-5\nC400120190503002\n2019-06-05\n(종전)「승강기 안전검사기준」별표 3\n반납\nK200\nNaN\n에스컬레이터 &gt; 에스컬레이터 &gt; 일반형\n모델\n중국\n\n\n2\nABA71-K001-19001\n919920034\n티케이엘리베이터코리아\n충청남도 천안시 서북구 입장면 연곡길 235\nC400120190430002\n2019-07-10\n(종전)「승강기 안전검사기준」별표 1\n반납\nEnta\nNaN\n엘리베이터 &gt; 전기식 엘리베이터 &gt; 일반형\n모델\n한국\n\n\n3\nABA71-K001-19001\n919920034\n티케이엘리베이터코리아\n충청남도 천안시 서북구 입장면 연곡길 235\nC400120200506100\n2019-07-10\n(종전)「승강기 안전검사기준」별표 1\n반납\nEnta\nNaN\n엘리베이터 &gt; 전기식 엘리베이터 &gt; 일반형\n모델\n한국\n\n\n4\nABA71-K001-19001\n919920034\n티케이엘리베이터코리아\n충청남도 천안시 서북구 입장면 연곡길 235\nC400120200828100\n2019-07-10\n(종전)「승강기 안전검사기준」별표 1\n반납\nEnta\nNaN\n엘리베이터 &gt; 전기식 엘리베이터 &gt; 일반형\n모델\n한국"
  },
  {
    "objectID": "posts/c_01.html#데이터-구조-확인",
    "href": "posts/c_01.html#데이터-구조-확인",
    "title": "1. 승강기안전 인증 현황",
    "section": "데이터 구조 확인",
    "text": "데이터 구조 확인\n\ndf.shape\n\n(2141, 13)\n\n\n\n# 데이터 구조 파악\n# object 문자형\n# int/float 수치형\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 2141 entries, 0 to 2140\nData columns (total 13 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   안전인증번호  2141 non-null   object\n 1   인증업체코드  1618 non-null   object\n 2   업체명     2141 non-null   object\n 3   인증업체주소  2141 non-null   object\n 4   접수번호    2141 non-null   object\n 5   인증서발행일  2141 non-null   object\n 6   적용안전기준  2141 non-null   object\n 7   인증서상태   2141 non-null   object\n 8   모델명     2141 non-null   object\n 9   파생모델명   180 non-null    object\n 10  인증품목명   2141 non-null   object\n 11  인증구분    2141 non-null   object\n 12  제조국가    2141 non-null   object\ndtypes: object(13)\nmemory usage: 217.6+ KB\n\n\n\n# 문자형(범주형) 데이터 확인\ndf.describe(include=['object']).T\n\n\n\n\n\n\n\n\ncount\nunique\ntop\nfreq\n\n\n\n\n안전인증번호\n2141\n335\nABA71-H005-20003\n21\n\n\n인증업체코드\n1618\n85\n919920035\n267\n\n\n업체명\n2141\n90\n현대엘리베이터\n334\n\n\n인증업체주소\n2141\n101\n충청남도 천안시 서북구 입장면 연곡길 235\n251\n\n\n접수번호\n2141\n2135\nB20231206103\n3\n\n\n인증서발행일\n2141\n760\n2021-08-05\n23\n\n\n적용안전기준\n2141\n6\n승강기안전기준 별표 22\n1759\n\n\n인증서상태\n2141\n3\n회수\n1527\n\n\n모델명\n2141\n314\nWBLX-GT-3\n25\n\n\n파생모델명\n180\n28\nHTEL-P33\n14\n\n\n인증품목명\n2141\n8\n엘리베이터 &gt; 전기식 엘리베이터 &gt; 일반형\n2001\n\n\n인증구분\n2141\n1\n모델\n2141\n\n\n제조국가\n2141\n3\n한국\n2020\n\n\n\n\n\n\n\n\n# 수치형 데이터 확인\n# df.describe(include=['int64','float64'])\n# df.describe(include='number')\n\n\n수치형 데이터 없음"
  },
  {
    "objectID": "posts/c_01.html#결측치-각-column의-결측값-비율",
    "href": "posts/c_01.html#결측치-각-column의-결측값-비율",
    "title": "1. 승강기안전 인증 현황",
    "section": "1. (결측치) 각 column의 결측값 비율",
    "text": "1. (결측치) 각 column의 결측값 비율\n\n# 각 column의 결측값 비율 계산\nmissing_ratio = df.isnull().mean()                  # 각 column의 결측값 비율 계산 (결측 개수 / 전체 row 수)\nmissing_ratio = missing_ratio.sort_values(ascending=False)  # 결측 비율이 높은 순서대로 정렬\nmissing_ratio = missing_ratio.reset_index()         # Series → DataFrame 변환 (인덱스 초기화)\nmissing_ratio.columns = ['Column', 'MissingRatio']\nprint(missing_ratio)\n\n    Column  MissingRatio\n0    파생모델명      0.915927\n1   인증업체코드      0.244278\n2   안전인증번호      0.000000\n3   인증업체주소      0.000000\n4      업체명      0.000000\n5     접수번호      0.000000\n6   인증서발행일      0.000000\n7    인증서상태      0.000000\n8   적용안전기준      0.000000\n9      모델명      0.000000\n10   인증품목명      0.000000\n11    인증구분      0.000000\n12    제조국가      0.000000\n\n\n\n파생모델명의 결측값 비율은 매우 높음\n인증업체코드도 결측값 존재"
  },
  {
    "objectID": "posts/c_01.html#이상치-각-column별-이상치-확인",
    "href": "posts/c_01.html#이상치-각-column별-이상치-확인",
    "title": "1. 승강기안전 인증 현황",
    "section": "2. (이상치) 각 column별 이상치 확인",
    "text": "2. (이상치) 각 column별 이상치 확인\n\n# # 수치형 변수만 추출\n# numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# # 이상치 비율 저장용 리스트\n# outlier_info = []\n\n# # 각 수치형 column에 대해 이상치 비율 계산 (IQR 방식)\n# for col in numeric_cols:\n#     Q1 = df[col].quantile(0.25)\n#     Q3 = df[col].quantile(0.75)\n#     IQR = Q3 - Q1\n#     lower = Q1 - 1.5 * IQR\n#     upper = Q3 + 1.5 * IQR\n#     outliers = ((df[col] &lt; lower) | (df[col] &gt; upper)).sum()\n#     outlier_ratio = outliers / df.shape[0]\n#     outlier_info.append((col, outliers, outlier_ratio))\n\n# # 결과 DataFrame 정리\n# outlier_df = pd.DataFrame(outlier_info, columns=['Column', 'OutlierCount', 'OutlierRatio'])\n# outlier_df = outlier_df.sort_values(by='OutlierRatio', ascending=False)\n\n# print(outlier_df)\n\n\n# # 이상치 비율이 높은 상위 n개 변수만 시각화\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\n# # 이상치 비율 높은 상위 n개 변수만 선택\n# top_n = 5\n# top_outlier_cols = outlier_df.head(top_n)['Column']\n\n# # 박스플롯 시각화\n# plt.figure(figsize=(12, 6))\n# for i, col in enumerate(top_outlier_cols, 1):\n#     plt.subplot(1, top_n, i)\n#     sns.boxplot(y=df[col])\n#     plt.title(col)\n#     plt.tight_layout()\n\n# plt.show()\n\n\n# # 개별 탐색 시 사용 가능한 함수 정의\n# def plot_box(col):\n#     sns.boxplot(y=df[col])\n#     plt.title(f\"Boxplot of {col}\")\n#     plt.show()\n\n# # 예시 사용: plot_box('Column Name')"
  },
  {
    "objectID": "posts/c_01.html#unique-각-column의-unique값과-unique값별-빈도",
    "href": "posts/c_01.html#unique-각-column의-unique값과-unique값별-빈도",
    "title": "1. 승강기안전 인증 현황",
    "section": "3. (unique) 각 column의 unique값과 unique값별 빈도",
    "text": "3. (unique) 각 column의 unique값과 unique값별 빈도\n\n# 전체 column 대상 (비율을 %로, 순서 유지)\n\nfor col in df.columns:\n    print(f\"=== {col} ===\")\n    print(\"Unique count:\", df[col].nunique())\n\n    # 빈도와 비율 계산 (NaN 포함, 고유값 순서 유지)\n    value_counts = df[col].value_counts(dropna=False, sort=False)\n    value_ratio = df[col].value_counts(normalize=True, dropna=False, sort=False) * 100  # 비율을 %\n\n    # 결합\n    summary_df = pd.DataFrame({\n        'Count': value_counts,\n        'Ratio (%)': value_ratio.round(2)\n    })\n\n    print(summary_df)\n    print(\"\\n\")\n\n=== 안전인증번호 ===\nUnique count: 335\n                    Count  Ratio (%)\n안전인증번호                              \nABB73-R001-19001        1       0.05\nABB73-R001-19002        1       0.05\nABA71-K001-19001        6       0.28\nABA71-K001-19002       10       0.47\nABA71-K001-19003       12       0.56\n...                   ...        ...\nABA71-M010-24001        1       0.05\nABA73-M002-24001        1       0.05\nABA71-H028-25001        1       0.05\nABA71-B004-25001        1       0.05\nABA71-H003-25001\\t      2       0.09\n\n[335 rows x 2 columns]\n\n\n=== 인증업체코드 ===\nUnique count: 85\n           Count  Ratio (%)\n인증업체코드                     \n919971182      7       0.33\n919920034    235      10.98\n919890001     21       0.98\n919920075    116       5.42\n919920035    267      12.47\n...          ...        ...\nL              1       0.05\nE              1       0.05\nA              1       0.05\nF              1       0.05\nR              1       0.05\n\n[86 rows x 2 columns]\n\n\n=== 업체명 ===\nUnique count: 90\n             Count  Ratio (%)\n업체명                          \n삼정엘리베이터          7       0.33\n티케이엘리베이터코리아    272      12.70\n쉰들러엘리베이터        23       1.07\n오티스엘리베이터       154       7.19\n현대엘리베이터        334      15.60\n...            ...        ...\n태성산업             2       0.09\n한솔엘리베이터          2       0.09\n좋은엘리베이터          1       0.05\n케이에스컬레이터         1       0.05\n세라에스이(주)         1       0.05\n\n[90 rows x 2 columns]\n\n\n=== 인증업체주소 ===\nUnique count: 101\n                          Count  Ratio (%)\n인증업체주소                                    \n서울특별시 양천구 목동서로 301-5          7       0.33\n충청남도 천안시 서북구 입장면 연곡길 235    251      11.72\n경기도 시흥시 산기대학로 60             22       1.03\n서울특별시 영등포구 국제금융로 10         154       7.19\n경기도 이천시 부발읍 경충대로 2091       137       6.40\n...                         ...        ...\n경기도 김포시 하성면 오정동로 120          2       0.09\n대구광역시 북구 대현로 106              2       0.09\n부산광역시 수영구 수영로 568             2       0.09\n부산광역시 강서구 신호산단1로 101          1       0.05\n경상남도 거창군 남상면 승강기단지3길 9        1       0.05\n\n[101 rows x 2 columns]\n\n\n=== 접수번호 ===\nUnique count: 2135\n                  Count  Ratio (%)\n접수번호                              \nC400120190503001      1       0.05\nC400120190503002      1       0.05\nC400120190430002      1       0.05\nC400120200506100      1       0.05\nC400120200828100      1       0.05\n...                 ...        ...\nB20250122102          1       0.05\nB20250226101          1       0.05\nB20250225101          1       0.05\nB20250226102          1       0.05\nB20250207101          1       0.05\n\n[2135 rows x 2 columns]\n\n\n=== 인증서발행일 ===\nUnique count: 760\n            Count  Ratio (%)\n인증서발행일                      \n2019-06-05      2       0.09\n2019-07-10      9       0.42\n2019-07-15      2       0.09\n2019-07-24     19       0.89\n2019-07-30      7       0.33\n...           ...        ...\n2025-02-21      1       0.05\n2025-02-24      3       0.14\n2025-02-25      2       0.09\n2025-02-26      2       0.09\n2025-02-27      2       0.09\n\n[760 rows x 2 columns]\n\n\n=== 적용안전기준 ===\nUnique count: 6\n                      Count  Ratio (%)\n적용안전기준                                \n(종전)「승강기 안전검사기준」별표 3     15       0.70\n(종전)「승강기 안전검사기준」별표 1    248      11.58\n승강기안전기준 별표 22          1759      82.16\n승강기안전기준 별표 24            93       4.34\n승강기안전기준 별표 26            15       0.70\n승강기안전기준 별표 25            11       0.51\n\n\n=== 인증서상태 ===\nUnique count: 3\n       Count  Ratio (%)\n인증서상태                  \n반납       386      18.03\n회수      1527      71.32\n정상       228      10.65\n\n\n=== 모델명 ===\nUnique count: 314\n             Count  Ratio (%)\n모델명                          \nK300A            1       0.05\nK200             1       0.05\nEnta             6       0.28\nElexess2        10       0.47\nGL1             12       0.56\n...            ...        ...\nHS-MOR-DIA6      2       0.09\nZEST             1       0.05\nK Series         1       0.05\nSW MR            1       0.05\nHLEV-MR-1        1       0.05\n\n[314 rows x 2 columns]\n\n\n=== 파생모델명 ===\nUnique count: 28\n                                                    Count  Ratio (%)\n파생모델명                                                               \nNaN                                                  1961      91.59\nG2 ELEVATOR                                             8       0.37\nG6 ELEVATOR                                             8       0.37\nGREL-M-2.0                                             12       0.56\nNETIS MRL                                               3       0.14\nFP17XNUMEN                                              1       0.05\nFP17XNUMEN5                                             3       0.14\nHTEL-P33                                               14       0.65\nDAWON-MRS                                              10       0.47\nDYMR-02                                                10       0.47\nMOR08                                                   8       0.37\nKDS11, KDS12                                           13       0.61\nFP17XNUMEN, FP17XWTYF328                                9       0.42\nDN-HYD-FC2                                              4       0.19\nKDS71                                                  11       0.51\nLALUZ-ER                                                6       0.28\nNETIS MRL-9S, NETIS MRL-ER1, NETIS MRL-ERS              1       0.05\nWBSS-GY-1                                              10       0.47\nWBLX-GX-2, WBLX-GA-1, WBLX-GT-A, WBLX-GT-2, WBL...      1       0.05\nFP17XNUMEN5, FP17XNUMEN2                                1       0.05\nFP17XNUMEM5, FP17XNUMEM2                                4       0.19\nENTA-B, ENTA-C, ENTA-D                                  6       0.28\nMETA-R1-A, META-R2-A, META-R2-C, META-R2-D, MET...      1       0.05\nMETA-L1-B                                               7       0.33\nMETA-R1-A, META-R2-A, META-R2-C, META-R2-D, MET...      8       0.37\nWBLX-GA-1, WBLX-GT-1, WBLX-GT-2, WBLX-GX-1, WBL...     12       0.56\nSIT-1                                                   2       0.09\nBAJO                                                    3       0.14\nK-NP-MRL-21QL                                           4       0.19\n\n\n=== 인증품목명 ===\nUnique count: 8\n                               Count  Ratio (%)\n인증품목명                                          \n에스컬레이터 &gt; 에스컬레이터 &gt; 일반형             87       4.06\n엘리베이터 &gt; 전기식 엘리베이터 &gt; 일반형         2001      93.46\n에스컬레이터 &gt; 무빙워크 &gt; 일반형               21       0.98\n휠체어리프트 &gt; 유압식 수직형휠체어리프트 &gt; 일반형      11       0.51\n휠체어리프트 &gt; 전기식 수직형휠체어리프트 &gt; 일반형       2       0.09\n엘리베이터 &gt; 소형화물용 엘리베이터 &gt; 일반형         11       0.51\n엘리베이터 &gt; 유압식 엘리베이터 &gt; 일반형            6       0.28\n휠체어리프트 &gt; 유압식 수직형 휠체어리프트 &gt; 일반형      2       0.09\n\n\n=== 인증구분 ===\nUnique count: 1\n      Count  Ratio (%)\n인증구분                  \n모델     2141      100.0\n\n\n=== 제조국가 ===\nUnique count: 3\n      Count  Ratio (%)\n제조국가                  \n중국      120       5.60\n한국     2020      94.35\n스페인       1       0.05\n\n\n\n\n\n의미 있어 보이는 변수\n\n인증서상태\n\n\n\n# # 범주형 변수만 대상\n# cat_cols = df.select_dtypes(include=['object']).columns\n\n# for col in cat_cols:\n#     print(f\"=== {col} ===\")\n#     print(\"Unique count:\", df[col].nunique())\n\n#     value_counts = df[col].value_counts(dropna=False, sort=False)\n#     value_ratio = df[col].value_counts(normalize=True, dropna=False, sort=False) * 100\n\n#     summary_df = pd.DataFrame({\n#         'Count': value_counts,\n#         'Ratio (%)': value_ratio.round(2)\n#     })\n\n#     print(summary_df)\n#     print(\"\\n\")"
  },
  {
    "objectID": "posts/c_01.html#기술통계-각-column의-기술통계-평균값-최대값-최솟값-최빈값-분위수-등",
    "href": "posts/c_01.html#기술통계-각-column의-기술통계-평균값-최대값-최솟값-최빈값-분위수-등",
    "title": "1. 승강기안전 인증 현황",
    "section": "4. (기술통계) 각 column의 기술통계 (평균값, 최대값, 최솟값, 최빈값, 분위수 등)",
    "text": "4. (기술통계) 각 column의 기술통계 (평균값, 최대값, 최솟값, 최빈값, 분위수 등)\n\n# # 수치형 변수만 선택\n# numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# # 통계 요약 저장용 리스트\n# stat_list = []\n\n# for col in numeric_cols:\n#     desc = df[col].describe()\n#     mode = df[col].mode(dropna=False).values[0]  # 최빈값 (여러 개 중 첫 번째 선택)\n#     mode_all = df[col].mode(dropna=False).tolist()  # 최빈값 리스트 형태로 저장\n\n#     stat_list.append({\n#         'Feature': col,\n#         'Count': desc['count'],\n#         'Mean': desc['mean'],\n#         'Std': desc['std'],\n#         'Min': desc['min'],\n#         '25%': desc['25%'],\n#         'Median (50%)': desc['50%'],\n#         '75%': desc['75%'],\n#         'Max': desc['max'],\n#         'Mode': mode,\n#         'Mode_all': mode_all\n#     })\n\n# # DataFrame으로 정리\n# stats_df = pd.DataFrame(stat_list)\n# stats_df"
  },
  {
    "objectID": "posts/c_01.html#상관관계-상관관계-매트릭스",
    "href": "posts/c_01.html#상관관계-상관관계-매트릭스",
    "title": "1. 승강기안전 인증 현황",
    "section": "5. (상관관계) 상관관계 매트릭스",
    "text": "5. (상관관계) 상관관계 매트릭스\n\n# # 수치형 변수 간 상관관계 매트릭스\n\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\n# # 수치형 변수만 선택\n# numeric_df = df.select_dtypes(include=['float64', 'int64'])\n\n# # 상관계수 계산\n# corr_matrix = numeric_df.corr()\n\n# # 시각화\n# plt.figure(figsize=(10, 8))\n# sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", square=True)\n# plt.title(\"Numeric Feature Correlation Matrix\")\n# plt.tight_layout()\n# plt.show()"
  },
  {
    "objectID": "posts/c_01.html#시각화-histogram-bar-graph-box-plot-등",
    "href": "posts/c_01.html#시각화-histogram-bar-graph-box-plot-등",
    "title": "1. 승강기안전 인증 현황",
    "section": "6. (시각화) histogram, bar graph, box plot 등",
    "text": "6. (시각화) histogram, bar graph, box plot 등\n\n# import matplotlib.pyplot as plt\n\n# numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n\n# # 전체 수치형 변수에 대해 히스토그램 그리기\n# for col in numeric_cols:\n#     plt.figure(figsize=(6, 4))\n#     plt.hist(df[col].dropna(), bins=30, edgecolor='black')\n#     plt.title(f'Histogram of {col}')\n#     plt.xlabel(col)\n#     plt.ylabel('Frequency')\n#     plt.tight_layout()\n#     plt.show()\n\n\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n\n# cat_cols = df.select_dtypes(include=['object']).columns\n\n# # 전체 범주형 변수에 대해 히스토그램 그리기\n\n# for col in cat_cols:\n#     plt.figure(figsize=(6, 4))\n#     ax = sns.countplot(data=df, x=col, order=df[col].value_counts().index, color='salmon')\n\n#     total = len(df)\n\n#     for p in ax.patches:\n#         count = int(p.get_height())\n#         percent = 100 * count / total\n#         label = f'{count} ({percent:.1f}%)'\n\n#         # 텍스트 위치: 막대 안쪽 상단 (중앙 정렬)\n#         ax.annotate(label,\n#                     (p.get_x() + p.get_width() / 2., p.get_height() * 0.95),\n#                     ha='center', va='top',\n#                     fontsize=9, color='white', weight='bold')\n\n#     plt.title(f'Bar Graph of {col} (Count + Ratio)')\n#     plt.xticks(rotation=45)\n#     plt.tight_layout()\n#     plt.show()\n\n\n# # 특정 변수에 따른 수치형 변수 분포 비교\n# for col in numeric_cols:\n#     plt.figure(figsize=(6, 4))\n#     sns.boxplot(data=df, x='###Column Name###', y=col)\n#     plt.title(f'Boxplot of {col} by ###Column Name###')\n#     plt.tight_layout()\n#     plt.show()"
  },
  {
    "objectID": "posts/c_01.html#교차표-범주형-변수-간의-관계",
    "href": "posts/c_01.html#교차표-범주형-변수-간의-관계",
    "title": "1. 승강기안전 인증 현황",
    "section": "7. (교차표) 범주형 변수 간의 관계",
    "text": "7. (교차표) 범주형 변수 간의 관계\n\n# '제조국가'에 따른 '인증서상태' 비율\nprint(\"=== 제조국가 vs 인증서상태 ===\")\nratio = df.groupby('제조국가')['인증서상태'].value_counts(normalize=True).unstack()\nratio\n\n=== 제조국가 vs 인증서상태 ===\n\n\n\n\n\n\n\n\n인증서상태\n반납\n정상\n회수\n\n\n제조국가\n\n\n\n\n\n\n\n스페인\nNaN\n1.000000\nNaN\n\n\n중국\n0.158333\n0.183333\n0.658333\n\n\n한국\n0.181683\n0.101485\n0.716832\n\n\n\n\n\n\n\n\npd.crosstab(df['제조국가'], df['인증서상태'], normalize='index')\n\n\n\n\n\n\n\n인증서상태\n반납\n정상\n회수\n\n\n제조국가\n\n\n\n\n\n\n\n스페인\n0.000000\n1.000000\n0.000000\n\n\n중국\n0.158333\n0.183333\n0.658333\n\n\n한국\n0.181683\n0.101485\n0.716832"
  },
  {
    "objectID": "posts/c_01.html#결측치-처리",
    "href": "posts/c_01.html#결측치-처리",
    "title": "1. 승강기안전 인증 현황",
    "section": "1. 결측치 처리",
    "text": "1. 결측치 처리\n\n필요시 할 예정"
  },
  {
    "objectID": "posts/c_01.html#이상치-처리",
    "href": "posts/c_01.html#이상치-처리",
    "title": "1. 승강기안전 인증 현황",
    "section": "2. 이상치 처리",
    "text": "2. 이상치 처리\n\n필요시 할 예정"
  }
]